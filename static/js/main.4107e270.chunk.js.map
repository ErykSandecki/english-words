{"version":3,"sources":["components/App/constants.ts","assets/images/empty-section.svg","store/words/actionsType.ts","components/ListWords/services/getFilteredWords.ts","store/words/selectors.ts","components/ListWords/ListWordsStyled.tsx","components/ListWords/ListWords.tsx","assets/icons/plus.svg","assets/images/logo-neutral.svg","assets/images/header-background.svg","components/PageHeader/PageHeaderStyled.tsx","components/PageHeader/PageHeader.tsx","assets/images/logo.svg","components/PageLoader/PageLoaderStyled.tsx","components/PageLoader/PageLoader.tsx","assets/images/arrow-up.svg","services/scrollTop.ts","components/ScrollButton/ScrollButtonStyled.tsx","components/ScrollButton/ScrollButton.tsx","assets/icons/sort-alphabetically.svg","assets/icons/sort-alphabetically-selected.svg","assets/icons/sort-latest.svg","assets/icons/sort-latest-selected.svg","assets/icons/sort-oldest.svg","assets/icons/sort-oldest-selected.svg","assets/icons/sort-shuffle.svg","assets/icons/sort-shuffle-selected.svg","components/PageFooter/constants.ts","components/PageFooter/PageFooterStyled.tsx","components/PageFooter/PageFooter.tsx","components/App/AppStyled.tsx","components/Firebase/constants.ts","components/App/App.tsx","components/Firebase/enhanceFirebase.tsx","store/words/actions.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/words/reducer.ts","store/reducers.ts","components/Firebase/services/getRefDatabase.ts","store/words/saga.ts","store/words/watch.ts","store/sagas.ts","constants.ts","store/configureStore.ts","styles.tsx","index.tsx"],"names":["FilterType","WordsActionsType","getFilteredWords","filterType","data","latest","reverse","alphabetically","sort","a","english","b","localeCompare","getSortedDataByAlphabetically","shuffle","randomIndex","prevValue","currentIndex","length","Math","floor","random","getShuffledData","groupedEndpointsSelector","getFp","isPendingSelector","createSelector","getDataSelector","getListCategoriesSelector","map","name","getSumTotalWordsSelector","reduce","current","words","ListWords","styled","div","index","selectedCategory","setSelectedCategory","categories","useSelector","listWords","pending","className","onClick","polish","alt","src","EmptySection","PageHeader","header","HeaderBackground","totalAmountWords","amountWords","LogoNeutral","PlusIcon","PageLoader","isPending","ReactDOM","createPortal","Logo","document","getElementById","scrollTop","window","scrollTo","top","behavior","ScrollButton","useState","showButton","setShowButton","onScrollHandler","pageYOffset","useEffect","addEventListener","ArrowUp","buttons","unSelected","SortLatest","selected","SortLatestSelected","text","oldest","SortOldest","SortOldestSelected","SortShuffle","SortShuffleSelected","SortAlphabetically","SortAlphabeticallySelected","PageFooter","footer","currentFilterType","setFilterType","isSelectedFilter","setTimeout","onClickHandler","EDatabaseColumns","App","size","mapDispatchToProps","fetchWordsSuccess","payload","type","fetchWordsSuccessAction","enhanceFirebase","compose","connect","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","i","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","ref","DataBaseColumns","database","on","initializeApp","initialState","state","action","reducers","createRootReducer","combineReducers","getRefDatabase","path","refDataBase","child","addNewWord","set","watchGroupedEndpoints","all","takeEvery","EFontNames","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","createGlobalStyle","RUBIK","NUNITO","render","StrictMode"],"mappings":"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","file":"static/js/main.4107e270.chunk.js","sourcesContent":["export enum FilterType {\r\n  latest,\r\n  oldest,\r\n  shuffle,\r\n  alphabetically,\r\n  pending,\r\n}\r\n","export default __webpack_public_path__ + \"static/media/empty-section.d269f6e5.svg\";","export const REDUCER_KEY = 'words';\r\n\r\nexport enum WordsActionsType {\r\n  fetchWordsSuccess = 'fetchWordsSuccess',\r\n  fetchWordsError = 'fetchWordsErorr',\r\n  addNewWord = 'addNewWord',\r\n  addNewWordSuccess = 'addNewWordSuccess',\r\n  addNewWordError = 'addNewWordSuccess',\r\n  editWord = 'editWord',\r\n  editWordSuccess = 'editWordSuccess',\r\n  editWordError = 'editWordError',\r\n  deleteWord = 'deleteWord',\r\n  deleteWordSuccess = 'deleteWordSuccess',\r\n  deleteWordError = 'deleteWordError',\r\n}\r\n","// others\r\nimport { FilterType } from '../../App/constants';\r\nimport { TWord } from '../../../store/words/types';\r\n\r\nconst getShuffledData = (data: Array<TWord>): Array<TWord> => {\r\n  let randomIndex, prevValue, currentIndex;\r\n  for (currentIndex = data.length - 1; currentIndex > 0; currentIndex--) {\r\n    randomIndex = Math.floor(Math.random() * (currentIndex + 1));\r\n    prevValue = data[currentIndex];\r\n    data[currentIndex] = data[randomIndex];\r\n    data[randomIndex] = prevValue;\r\n  }\r\n  return data;\r\n};\r\n\r\nconst getSortedDataByAlphabetically = (data: Array<TWord>): Array<TWord> =>\r\n  [...data].sort(({ english: a }, { english: b }) => a.localeCompare(b));\r\n\r\nconst getFilteredWords = (\r\n  filterType: FilterType,\r\n  data: Array<TWord>\r\n): Array<TWord> => {\r\n  switch (filterType) {\r\n    case FilterType.latest:\r\n      return [...data].reverse();\r\n    case FilterType.alphabetically:\r\n      return getSortedDataByAlphabetically(data);\r\n    case FilterType.shuffle:\r\n      return getShuffledData([...data]);\r\n    default:\r\n      return data;\r\n  }\r\n};\r\n\r\nexport default getFilteredWords;\r\n","// @ts-nocheck\r\nimport getFp from 'lodash/fp/get';\r\nimport { createSelector, Selector } from 'reselect';\r\n\r\n// others\r\nimport { TFetchWords } from './types';\r\n\r\n// store\r\nimport { REDUCER_KEY } from './actionsType';\r\nimport { TMainState } from '../../types';\r\nimport { TLocationState } from './types';\r\n\r\nexport const groupedEndpointsSelector: Selector<\r\n  TMainState,\r\n  TLocationState\r\n> = getFp(REDUCER_KEY);\r\n\r\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\r\n  groupedEndpointsSelector,\r\n  getFp('isPending')\r\n);\r\n\r\nexport const getDataSelector: Selector<\r\n  TMainState,\r\n  Array<TFetchWords>\r\n> = createSelector(groupedEndpointsSelector, getFp('data'));\r\n\r\nexport const getListCategoriesSelector: Selector<\r\n  Array<TFetchWords>,\r\n  Array<string>\r\n> = createSelector(getDataSelector, (data) => data.map(({ name }) => name));\r\n\r\nexport const getSumTotalWordsSelector: Selector<\r\n  Array<TFetchWords>,\r\n  number\r\n> = createSelector(getDataSelector, (data) =>\r\n  data\r\n    ? data.reduce(\r\n        (current, { words }) => current + (words ? words.length : 0),\r\n        0\r\n      )\r\n    : 0\r\n);\r\n\r\nexport const getSumWordsFormCategorySelector = (\r\n  index: number\r\n): Selector<Array<TFetchWords>, number> =>\r\n  createSelector(getDataSelector, (data) => {\r\n    if (data.length > 0 && data[index].words) {\r\n      return data[index].words.length;\r\n    }\r\n    return 0;\r\n  });\r\n\r\nexport const getListWordsSelector = (\r\n  index: number\r\n): Selector<Array<TFetchWords>, number> =>\r\n  createSelector(getDataSelector, (data) => {\r\n    if (data.length > 0 && data[index].words) {\r\n      return data[index].words;\r\n    }\r\n    return [];\r\n  });\r\n","// @ts-nocheck\r\nimport styled from 'styled-components';\r\n\r\nexport const ListWords = styled.div`\r\n  margin-top: 60px;\r\n  padding-bottom: 50px;\r\n\r\n  nav {\r\n    display: inline-flex;\r\n    margin-left: 10%;\r\n    max-width: 100%;\r\n    padding: 10px 0;\r\n    overflow-x: auto;\r\n\r\n    & > p {\r\n      margin: 0 10px;\r\n      padding: 0 10px;\r\n      position: relative;\r\n      white-space: nowrap;\r\n\r\n      &.selected {\r\n        color: #009add;\r\n\r\n        &::after {\r\n          content: '';\r\n          position: absolute;\r\n          bottom: -10px;\r\n          left: 0;\r\n          width: 100%;\r\n          background-color: #009add;\r\n          height: 2px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .word-wrapper {\r\n    background-color: #fff;\r\n    border-radius: 5px;\r\n    margin: 20px 10%;\r\n    padding: 10px 25px;\r\n    position: relative;\r\n\r\n    &::before {\r\n      background-color: #009add;\r\n      border-bottom-left-radius: 5px;\r\n      border-top-left-radius: 5px;\r\n      content: '';\r\n      height: 100%;\r\n      position: absolute;\r\n      left: 0;\r\n      top: 0;\r\n      width: 3px;\r\n    }\r\n\r\n    &:nth-child(odd)::before {\r\n      background-color: #82b632;\r\n    }\r\n\r\n    & > p {\r\n      text-transform: capitalize;\r\n    }\r\n\r\n    & > p:first-of-type {\r\n      color: #676c72;\r\n      font-weight: 600;\r\n      font-size: 16px;\r\n    }\r\n\r\n    & > p:last-of-type {\r\n      color: #a2a8b1;\r\n      font-size: 12px;\r\n    }\r\n\r\n    & > span {\r\n      bottom: 10px;\r\n      color: #009add;\r\n      font-size: 10px;\r\n      position: absolute;\r\n      right: 25px;\r\n    }\r\n  }\r\n\r\n  .empty-section {\r\n    margin-top: 50px;\r\n    text-align: center;\r\n  }\r\n`;\r\n","// @ts-nocheck\r\nimport React, { FunctionComponent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// others\r\nimport EmptySection from '../../assets/images/empty-section.svg';\r\nimport { FilterType } from '../App/constants';\r\n\r\n// services\r\nimport getFilteredWords from './services/getFilteredWords';\r\n\r\n// store\r\nimport {\r\n  getListCategoriesSelector,\r\n  getListWordsSelector,\r\n} from '../../store/words/selectors';\r\n// styles\r\nimport { ListWords as ListWordsStyled } from './ListWordsStyled';\r\n\r\ntype TProps = {\r\n  filterType: FilterType;\r\n  selectedCategory: number;\r\n  setSelectedCategory: (index: number) => void;\r\n};\r\n\r\nconst ListWords: FunctionComponent<TProps> = ({\r\n  filterType,\r\n  selectedCategory,\r\n  setSelectedCategory,\r\n}) => {\r\n  const categories = useSelector(getListCategoriesSelector);\r\n  const listWords = useSelector(getListWordsSelector(selectedCategory));\r\n\r\n  if (filterType === FilterType.pending) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ListWordsStyled>\r\n      {/* NAV CATEGORY */}\r\n      <nav>\r\n        {categories.map((name, index) => (\r\n          <p\r\n            className={selectedCategory === index ? 'selected' : ''}\r\n            onClick={() => setSelectedCategory(index)}\r\n            key={index}\r\n          >\r\n            {name}\r\n          </p>\r\n        ))}\r\n      </nav>\r\n\r\n      {/* WORDS */}\r\n      {listWords.length > 0 ? (\r\n        getFilteredWords(filterType, listWords).map(\r\n          ({ english, polish }, index) => (\r\n            <div key={index} className=\"word-wrapper\">\r\n              <p>{english}</p>\r\n              <p>{polish}</p>\r\n              <span>{categories[selectedCategory]}</span>\r\n            </div>\r\n          )\r\n        )\r\n      ) : (\r\n        <div className=\"empty-section\">\r\n          <img alt=\"empty-section\" src={EmptySection} />\r\n        </div>\r\n      )}\r\n    </ListWordsStyled>\r\n  );\r\n};\r\n\r\nexport default ListWords;\r\n","export default __webpack_public_path__ + \"static/media/plus.72baf2a6.svg\";","export default __webpack_public_path__ + \"static/media/logo-neutral.4c4a4760.svg\";","export default __webpack_public_path__ + \"static/media/header-background.60c9dc30.svg\";","// @ts-nocheck\r\nimport styled from 'styled-components';\r\n\r\n// others\r\nimport HeaderBackground from '../../assets/images/header-background.svg';\r\n\r\nexport const PageHeader = styled.header`\r\n  background-image: url(${HeaderBackground});\r\n  height: 90px;\r\n  padding: 10px 15px 0 15px;\r\n  position: relative;\r\n\r\n  .wrapper-items {\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    & > img:first-of-type {\r\n      height: 36px;\r\n      width: 32px;\r\n    }\r\n\r\n    & > h3 {\r\n      color: #fff;\r\n      font-weight: 600;\r\n      margin: 0;\r\n      text-align: center;\r\n    }\r\n\r\n    & > img:last-of-type {\r\n      height: 15px;\r\n      width: 15px;\r\n    }\r\n  }\r\n\r\n  .statistic-container {\r\n    align-items: center;\r\n    background-color: #fff;\r\n    border-radius: 5px;\r\n    box-shadow: 0 5px 9px -3px #00000047;\r\n    display: flex;\r\n    height: 70px;\r\n    justify-content: space-between;\r\n    left: 10%;\r\n    padding: 10px;\r\n    position: absolute;\r\n    top: 65px;\r\n    width: 80%;\r\n  }\r\n\r\n  .statistic-wrapper {\r\n    text-align: center;\r\n    & > p {\r\n      color: #46494e;\r\n      font-weight: bold;\r\n    }\r\n\r\n    & > span {\r\n      color: #747575;\r\n      font-size: 12px;\r\n    }\r\n  }\r\n`;\r\n","// @ts-nocheck\r\nimport React, { FunctionComponent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// others\r\nimport PlusIcon from '../../assets/icons/plus.svg';\r\nimport LogoNeutral from '../../assets/images/logo-neutral.svg';\r\n\r\n// store\r\nimport {\r\n  getSumTotalWordsSelector,\r\n  getSumWordsFormCategorySelector,\r\n} from '../../store/words/selectors';\r\n\r\n// styles\r\nimport { PageHeader as PageHeaderStyled } from './PageHeaderStyled';\r\n\r\ntype TProps = {\r\n  selectedCategory: number;\r\n};\r\n\r\nconst PageHeader: FunctionComponent<TProps> = ({ selectedCategory }) => {\r\n  const totalAmountWords = useSelector(getSumTotalWordsSelector);\r\n  const amountWords = useSelector(\r\n    getSumWordsFormCategorySelector(selectedCategory)\r\n  );\r\n\r\n  return (\r\n    <PageHeaderStyled>\r\n      <div className=\"wrapper-items\">\r\n        {/* ICON */}\r\n        <img alt=\"logo-neutral\" src={LogoNeutral} />\r\n\r\n        {/* TITLE */}\r\n        <h3>English Words</h3>\r\n\r\n        {/* ICON */}\r\n        <img alt=\"plus-icon\" src={PlusIcon} />\r\n      </div>\r\n\r\n      {/* STATISTICS */}\r\n      <div className=\"statistic-container\">\r\n        <div className=\"statistic-wrapper\">\r\n          <p>{totalAmountWords}</p>\r\n          <span>Total Words</span>\r\n        </div>\r\n        <div className=\"statistic-wrapper\">\r\n          <p>{amountWords}</p>\r\n          <span>Words In This Section</span>\r\n        </div>\r\n      </div>\r\n    </PageHeaderStyled>\r\n  );\r\n};\r\n\r\nexport default PageHeader;\r\n","export default __webpack_public_path__ + \"static/media/logo.1995ca23.svg\";","// @ts-nocheck\r\nimport styled from 'styled-components';\r\n\r\nexport const PageLoader = styled.div`\r\n  background-color: #fff;\r\n  height: 100vh;\r\n  left: 0;\r\n  position: fixed;\r\n  pointer-events: none;\r\n  top: 0;\r\n  transition: 2s linear;\r\n  width: 100%;\r\n  z-index: 10;\r\n\r\n  ${({ isPending }) => !isPending && 'opacity: 0; visibility: hidden;'}\r\n\r\n  .loader {\r\n    animation: spinr 1.5s linear infinite;\r\n    border: 1px solid transparent;\r\n    border-radius: 50%;\r\n    border-top-color: #009add;\r\n    display: block;\r\n    height: 150px;\r\n    left: 50%;\r\n    margin: -75px 0 0 -75px;\r\n    position: relative;\r\n    top: 40%;\r\n    width: 150px;\r\n    -moz-animation: spinr 1.5s linear infinite;\r\n    -moz-border-radius: 50%;\r\n    -o-animation: spinr 1.5s linear infinite;\r\n    -webkit-animation: spinr 1.5s linear infinite;\r\n    -webkit-border-radius: 50%;\r\n\r\n    &::after {\r\n      animation: spinr 1s linear infinite;\r\n      border: 1px solid transparent;\r\n      border-radius: 50%;\r\n      border-top-color: #82b632;\r\n      bottom: 30px;\r\n      content: '';\r\n      left: 30px;\r\n      position: absolute;\r\n      right: 30px;\r\n      top: 30px;\r\n      -moz-animation: spinr 1s linear infinite;\r\n      -moz-border-radius: 50%;\r\n      -o-animation: spinr 1s linear infinite;\r\n      -webkit-animation: spinr 1s linear infinite;\r\n      -webkit-border-radius: 50%;\r\n    }\r\n\r\n    &::before {\r\n      animation: spinl 0.5s linear infinite;\r\n      border: 1px solid transparent;\r\n      border-radius: 50%;\r\n      border-top-color: #009add;\r\n      bottom: 15px;\r\n      content: '';\r\n      left: 15px;\r\n      position: absolute;\r\n      right: 15px;\r\n      top: 15px;\r\n      -moz-animation: spinl 0.5s linear infinite;\r\n      -moz-border-radius: 50%;\r\n      -o-animation: spinl 0.5s linear infinite;\r\n      -webkit-animation: spinl 0.5s linear infinite;\r\n      -webkit-border-radius: 50%;\r\n    }\r\n  }\r\n\r\n  .logo {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 40%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n\r\n  @-webkit-keyframes spinr {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n      -ms-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n      -ms-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @-moz-keyframes spinr {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n      -ms-transform: rotate(0deg);\r\n      -moz-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n      -ms-transform: rotate(360deg);\r\n      -moz-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @-o-keyframes spinr {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n      -ms-transform: rotate(0deg);\r\n      -o-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n      -ms-transform: rotate(360deg);\r\n      -o-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes spinr {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n      -ms-transform: rotate(0deg);\r\n      -moz-transform: rotate(0deg);\r\n      -o-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n      -ms-transform: rotate(360deg);\r\n      -moz-transform: rotate(360deg);\r\n      -o-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @-webkit-keyframes spinl {\r\n    0% {\r\n      -webkit-transform: rotate(360deg);\r\n      -ms-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(0deg);\r\n      -ms-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n  }\r\n\r\n  @-moz-keyframes spinl {\r\n    0% {\r\n      -webkit-transform: rotate(360deg);\r\n      -ms-transform: rotate(360deg);\r\n      -moz-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(0deg);\r\n      -ms-transform: rotate(0deg);\r\n      -moz-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n  }\r\n\r\n  @-o-keyframes spinl {\r\n    0% {\r\n      -webkit-transform: rotate(360deg);\r\n      -ms-transform: rotate(360deg);\r\n      -o-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(0deg);\r\n      -ms-transform: rotate(0deg);\r\n      -o-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n  }\r\n\r\n  @keyframes spinl {\r\n    0% {\r\n      -webkit-transform: rotate(360deg);\r\n      -ms-transform: rotate(360deg);\r\n      -moz-transform: rotate(360deg);\r\n      -o-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(0deg);\r\n      -ms-transform: rotate(0deg);\r\n      -moz-transform: rotate(0deg);\r\n      -o-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n  }\r\n`;\r\n","// @ts-nocheck\r\nimport React, { FunctionComponent } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// others\r\nimport Logo from '../../assets/images/logo.svg';\r\n\r\n// styles\r\nimport { PageLoader as PageLoaderStyled } from './PageLoaderStyled';\r\n\r\ntype TProps = {\r\n  isPending: boolean;\r\n};\r\n\r\nconst PageLoader: FunctionComponent<TProps> = ({ isPending }) =>\r\n  ReactDOM.createPortal(\r\n    <PageLoaderStyled isPending={isPending}>\r\n      {/* SPINNER */}\r\n      <div className=\"loader\" />\r\n\r\n      {/* LOGO */}\r\n      <img alt=\"logo\" className=\"logo\" src={Logo} />\r\n    </PageLoaderStyled>,\r\n    document.getElementById('pageLoader')\r\n  );\r\n\r\nexport default PageLoader;\r\n","export default __webpack_public_path__ + \"static/media/arrow-up.5926e008.svg\";","const scrollTop = (): void => {\r\n  window.scrollTo({ top: 0, behavior: 'smooth' });\r\n};\r\n\r\nexport default scrollTop;\r\n","// @ts-nocheck\r\nimport styled from 'styled-components';\r\n\r\nexport const ScrollButton = styled.div`\r\n  align-items: center;\r\n  background-color: #646464;\r\n  border-top-left-radius: 5px;\r\n  border-bottom-left-radius: 5px;\r\n  bottom: 150px;\r\n  display: flex;\r\n  height: 40px;\r\n  justify-content: center;\r\n  position: fixed;\r\n  right: 0;\r\n  width: 40px;\r\n  z-index: 10;\r\n`;\r\n","import React, { FunctionComponent, useEffect, useState } from 'react';\r\n\r\n// others\r\nimport ArrowUp from '../../assets/images/arrow-up.svg';\r\n\r\n// services\r\nimport scrollTop from '../../services/scrollTop';\r\n\r\n// styles\r\nimport { ScrollButton as ScrollButtonStyled } from './ScrollButtonStyled';\r\n\r\nconst ScrollButton: FunctionComponent = () => {\r\n  const [showButton, setShowButton] = useState(false);\r\n\r\n  const onClickHandler = (): void => {\r\n    scrollTop();\r\n    setShowButton(false);\r\n  };\r\n\r\n  const onScrollHandler = () => {\r\n    if (window.pageYOffset > 400) {\r\n      setShowButton(true);\r\n    } else if (window.pageYOffset <= 400) {\r\n      setShowButton(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', onScrollHandler);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  if (!showButton) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ScrollButtonStyled onClick={onClickHandler}>\r\n      <img alt=\"arrow-up\" src={ArrowUp} />\r\n    </ScrollButtonStyled>\r\n  );\r\n};\r\n\r\nexport default ScrollButton;\r\n","export default __webpack_public_path__ + \"static/media/sort-alphabetically.27ca50d5.svg\";","export default __webpack_public_path__ + \"static/media/sort-alphabetically-selected.b31750c1.svg\";","export default __webpack_public_path__ + \"static/media/sort-latest.6da2e5c9.svg\";","export default __webpack_public_path__ + \"static/media/sort-latest-selected.e016e239.svg\";","export default __webpack_public_path__ + \"static/media/sort-oldest.d66328ec.svg\";","export default __webpack_public_path__ + \"static/media/sort-oldest-selected.356b7137.svg\";","export default __webpack_public_path__ + \"static/media/sort-shuffle.cb2c48e6.svg\";","export default __webpack_public_path__ + \"static/media/sort-shuffle-selected.ca1eb407.svg\";","// others\r\nimport SortAlphabetically from '../../assets/icons/sort-alphabetically.svg';\r\nimport SortAlphabeticallySelected from '../../assets/icons/sort-alphabetically-selected.svg';\r\nimport SortLatest from '../../assets/icons/sort-latest.svg';\r\nimport SortLatestSelected from '../../assets/icons/sort-latest-selected.svg';\r\nimport SortOldest from '../../assets/icons/sort-oldest.svg';\r\nimport SortOldestSelected from '../../assets/icons/sort-oldest-selected.svg';\r\nimport SortShuffle from '../../assets/icons/sort-shuffle.svg';\r\nimport SortShuffleSelected from '../../assets/icons/sort-shuffle-selected.svg';\r\nimport { FilterType } from './../App/constants';\r\n\r\nexport const buttons = [\r\n  {\r\n    alt: 'sort-latest',\r\n    filterType: FilterType.latest,\r\n    src: {\r\n      unSelected: SortLatest,\r\n      selected: SortLatestSelected,\r\n    },\r\n    text: 'Latest',\r\n  },\r\n  {\r\n    alt: 'sort-oldest',\r\n    filterType: FilterType.oldest,\r\n    src: {\r\n      unSelected: SortOldest,\r\n      selected: SortOldestSelected,\r\n    },\r\n    text: 'Oldest',\r\n  },\r\n  {\r\n    alt: 'sort-shuffle',\r\n    filterType: FilterType.shuffle,\r\n    src: {\r\n      unSelected: SortShuffle,\r\n      selected: SortShuffleSelected,\r\n    },\r\n    text: 'shuffle',\r\n  },\r\n  {\r\n    alt: 'sort-alphabetically',\r\n    filterType: FilterType.alphabetically,\r\n    src: {\r\n      unSelected: SortAlphabetically,\r\n      selected: SortAlphabeticallySelected,\r\n    },\r\n    text: 'Alphabetically',\r\n  },\r\n];\r\n","// @ts-nocheck\r\nimport styled from 'styled-components';\r\n\r\nexport const PageFooter = styled.footer`\r\n  align-items: center;\r\n  background-color: #fff;\r\n  bottom: 0;\r\n  box-shadow: 0 -2px 9px -3px #00000047;\r\n  display: flex;\r\n  height: 50px;\r\n  justify-content: space-around;\r\n  left: 0;\r\n  position: fixed;\r\n  width: 100%;\r\n\r\n  .filter-button {\r\n    text-align: center;\r\n  }\r\n\r\n  .selected {\r\n    color: #009add;\r\n  }\r\n`;\r\n","// @ts-nocheck\r\nimport React, { FunctionComponent } from 'react';\r\n// others\r\nimport { buttons } from './constants';\r\nimport { FilterType } from '../App/constants';\r\n// services\r\nimport scrollTop from '../../services/scrollTop';\r\n// styles\r\nimport { PageFooter as PageFooterStyled } from './PageFooterStyled';\r\n\r\ntype TProps = {\r\n  filterType: FilterType;\r\n  setFilterType: (filterType: FilterType) => void;\r\n};\r\n\r\nconst PageFooter: FunctionComponent<TProps> = ({\r\n  filterType: currentFilterType,\r\n  setFilterType,\r\n}) => {\r\n  const onClickHandler = (filterType: FilterType): void => {\r\n    if (filterType !== currentFilterType || filterType === FilterType.shuffle) {\r\n      scrollTop();\r\n      setFilterType(FilterType.pending);\r\n      setTimeout(() => setFilterType(filterType), 500);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PageFooterStyled>\r\n      {buttons.map(\r\n        ({ alt, filterType, src: { selected, unSelected }, text }, index) => {\r\n          const isSelectedFilter = currentFilterType === index;\r\n          return (\r\n            <div\r\n              className=\"filter-button\"\r\n              onClick={() => onClickHandler(filterType)}\r\n              key={index}\r\n            >\r\n              <img alt={alt} src={isSelectedFilter ? selected : unSelected} />\r\n              <p className={isSelectedFilter ? 'selected' : ''}>{text}</p>\r\n            </div>\r\n          );\r\n        }\r\n      )}\r\n    </PageFooterStyled>\r\n  );\r\n};\r\n\r\nexport default PageFooter;\r\n","// @ts-nocheck\r\nimport styled from 'styled-components';\r\n\r\nexport const App = styled.div`\r\n  .overlay {\r\n    align-items: center;\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    display: flex;\r\n    height: 100vh;\r\n    justify-content: center;\r\n    left: 0;\r\n    position: fixed;\r\n    top: 0;\r\n    z-index: 15;\r\n    width: 100%;\r\n  }\r\n`;\r\n","export const config = {\r\n  apiKey: 'AIzaSyA-VRLP3BsbsmqFPgwsqyV4dwmglIWSWKM',\r\n  authDomain: 'english-words-cb95b.firebaseapp.com',\r\n  databaseURL: 'https://english-words-cb95b-default-rtdb.firebaseio.com',\r\n  projectId: 'english-words-cb95b',\r\n  storageBucket: 'english-words-cb95b.appspot.com',\r\n  messagingSenderId: '180289885757',\r\n  appId: '1:180289885757:web:4e42c0ed923a6c4de93c54',\r\n};\r\n\r\nexport enum EDatabaseColumns {\r\n  data = 'data',\r\n}\r\n","// @ts-nocheck\r\nimport React, { FunctionComponent, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Space, Spin } from 'antd';\r\n// components\r\nimport ListWords from '../ListWords/ListWords';\r\nimport PageHeader from '../PageHeader/PageHeader';\r\nimport PageLoader from '../PageLoader/PageLoader';\r\n// others\r\nimport { FilterType } from './constants';\r\n// store\r\nimport { isPendingSelector } from '../../store/words/selectors';\r\nimport ScrollButton from '../ScrollButton/ScrollButton';\r\nimport PageFooter from '../PageFooter/PageFooter';\r\n// styles\r\nimport { App as AppStyled } from './AppStyled';\r\n\r\nconst App: FunctionComponent<{}> = () => {\r\n  const [selectedCategory, setSelectedCategory] = useState(0);\r\n  const isPending = useSelector(isPendingSelector);\r\n  const [filterType, setFilterType] = useState(FilterType.latest);\r\n\r\n  return (\r\n    <AppStyled>\r\n      <PageLoader isPending={isPending} />\r\n      {!isPending && (\r\n        <>\r\n          {/* OVERLAY */}\r\n          {filterType === FilterType.pending && (\r\n            <div className=\"overlay\">\r\n              <Space size=\"middle\">\r\n                <Spin size=\"large\" />\r\n              </Space>\r\n            </div>\r\n          )}\r\n\r\n          {/* SCROLL BUTTON */}\r\n          <ScrollButton />\r\n\r\n          {/* PAGE HEADER */}\r\n          <PageHeader selectedCategory={selectedCategory} />\r\n\r\n          {/* WORDS */}\r\n          <ListWords\r\n            filterType={filterType}\r\n            selectedCategory={selectedCategory}\r\n            setSelectedCategory={setSelectedCategory}\r\n          />\r\n\r\n          {/* FOOTER */}\r\n          <PageFooter filterType={filterType} setFilterType={setFilterType} />\r\n        </>\r\n      )}\r\n    </AppStyled>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'recompose';\r\n\r\n// others\r\nimport { TWord } from '../../store/words/types';\r\nimport { TInnerProps } from './Firebase';\r\n\r\n// store\r\nimport { fetchWordsSuccessAction } from '../../store/words/actions';\r\n\r\nconst mapDispatchToProps = {\r\n  fetchWordsSuccess: (payload: Array<TWord>) =>\r\n    fetchWordsSuccessAction(payload),\r\n};\r\n\r\nexport const enhanceFirebase = compose<TInnerProps, null>(\r\n  connect(null, mapDispatchToProps)\r\n);\r\n","// @ts-nocheck\r\n// others\r\nimport { TFetchWords } from './types';\r\n\r\n// store\r\nimport { WordsActionsType } from './actionsType';\r\nimport { TAddNewWord, TFetchWordsSuccess } from './types';\r\n\r\nexport const fetchWordsSuccessAction = (\r\n  payload: Array<TFetchWords>\r\n): TFetchWordsSuccess => ({\r\n  type: WordsActionsType.fetchWordsSuccess,\r\n  payload,\r\n});\r\n\r\nexport const addNewWordAction = (\r\n  payload: Array<TAddNewWord>\r\n): TFetchWordsSuccess => ({\r\n  type: WordsActionsType.addNewWord,\r\n  payload,\r\n});\r\n","const databaseErrorHandler = (error: string): void => {\r\n  // eslint-disable-next-line\r\n  console.error(error);\r\n};\r\n\r\nexport default databaseErrorHandler;\r\n","// @ts-nocheck\r\nconst getData = (values: any): void => {\r\n  const keys = Object.keys(values);\r\n  const data = [];\r\n\r\n  for (let i = 0; i < keys.length; i++) {\r\n    data.push(values[keys[i]]);\r\n  }\r\n  return data;\r\n};\r\n\r\nconst databaseSuccessHandler = (\r\n  response: any,\r\n  actions: (data: any) => void = null\r\n): void => {\r\n  const values = response.val();\r\n  actions(getData(values));\r\n};\r\n\r\nexport default databaseSuccessHandler;\r\n","// others\r\nimport { EDatabaseColumns as DataBaseColumns } from '../constants';\r\n\r\n// services\r\nimport databaseErrorHandler from './databaseErrorHandler';\r\nimport databaseSuccessHandler from './databaseSuccessHandler';\r\n\r\nconst databaseHandler = (\r\n  firebase: any,\r\n  actions: (data: any) => void,\r\n  ref: DataBaseColumns = DataBaseColumns.data\r\n) => {\r\n  firebase\r\n    .database()\r\n    .ref(ref)\r\n    .on(\r\n      'value',\r\n      (response: void) => databaseSuccessHandler(response, actions),\r\n      databaseErrorHandler\r\n    );\r\n};\r\n\r\nexport default databaseHandler;\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useEffect } from 'react';\r\nimport firebase from 'firebase';\r\n\r\n// components\r\nimport { enhanceFirebase } from './enhanceFirebase';\r\n\r\n// others\r\nimport { config } from './constants';\r\nimport { TWord } from '../../store/words/types';\r\n\r\n// services\r\nimport databaseHandler from './services/databaseHandler';\r\n\r\nexport type TInnerProps = {\r\n  fetchWordsSuccess: (payload: Array<TGroupedEndpoint>) => void;\r\n};\r\n\r\nconst Firebase: FunctionComponent<TInnerProps> = ({ fetchWordsSuccess }) => {\r\n  const actions = (payload: Array<TWord>): void => {\r\n    fetchWordsSuccess(payload);\r\n  };\r\n\r\n  useEffect(() => {\r\n    firebase.initializeApp(config);\r\n    databaseHandler(firebase, actions);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default enhanceFirebase(Firebase);\r\n","// @ts-nocheck\r\n// others\r\nimport { TFetchWordsSuccess } from './types';\r\n\r\n// store\r\nimport { WordsActionsType } from './actionsType';\r\nimport { TAnyAction } from '../../types';\r\nimport { TWordsState } from './types';\r\n\r\nconst initialState: TWordsState = {\r\n  data: [],\r\n  isPending: true,\r\n};\r\n\r\nconst fetchWordsSuccess = (\r\n  state: TWordsState,\r\n  action: TFetchWordsSuccess\r\n): TWordsState => ({\r\n  ...state,\r\n  data: action.payload,\r\n  isPending: false,\r\n});\r\n\r\nconst words = (\r\n  state: TWordsState = initialState,\r\n  action: TAnyAction\r\n): TWordsState => {\r\n  switch (action.type) {\r\n    case WordsActionsType.fetchWordsSuccess:\r\n      return fetchWordsSuccess(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default words;\r\n","// @ts-nocheck\r\nimport { combineReducers } from 'redux';\r\n\r\n// store\r\nimport words from './words/reducer';\r\n\r\nconst reducers = { words };\r\n\r\nconst createRootReducer = () =>\r\n  combineReducers({\r\n    ...reducers,\r\n  });\r\n\r\nexport default createRootReducer;\r\n","import firebase from 'firebase';\r\n\r\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\r\n  let refDataBase = firebase.database().ref(path[0]);\r\n  for (let i = 1; i < path.length; i++) {\r\n    refDataBase = refDataBase.child(path[i]);\r\n  }\r\n  return refDataBase;\r\n};\r\n\r\nexport default getRefDatabase;\r\n","// @ts-nocheck\r\nimport { PutEffect } from 'redux-saga/effects';\r\n\r\n// services\r\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\r\n\r\nexport function* addNewWord(data): Generator<PutEffect<any>> {\r\n  try {\r\n    yield getRefDatabase(['words']).set(data.payload);\r\n  } catch (error) {\r\n    //yield put(addNotification(error, 'Add new endpoint', EFeedbackTypes.ERROR));\r\n  }\r\n}\r\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\r\n\r\n// store\r\nimport { addNewWord } from './saga';\r\nimport { WordsActionsType } from './actionsType';\r\nimport { TWord } from './types';\r\n\r\nexport function* watchGroupedEndpoints(): Generator<\r\n  AllEffect<ForkEffect<TWord>>\r\n> {\r\n  yield all([takeEvery(WordsActionsType.addNewWord, addNewWord)]);\r\n}\r\n","// @ts-nocheck\r\nimport { SagaMiddleware } from 'redux-saga';\r\n\r\n// store\r\nimport { watchGroupedEndpoints } from './words/watch';\r\n\r\nconst watches = [watchGroupedEndpoints];\r\n\r\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\r\n  for (const watch of watches) sagaMiddleware.run(watch);\r\n};\r\n\r\nexport default sagaMiddlewareRuns;\r\n","export enum EFontNames {\r\n  NUNITO = 'Nunito',\r\n  RUBIK = 'Rubik',\r\n}\r\n","// @ts-nocheck\r\nimport {\r\n  Action,\r\n  applyMiddleware,\r\n  CombinedState,\r\n  createStore,\r\n  Store,\r\n} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport thunk from 'redux-thunk';\r\n\r\n// store\r\nimport reducers from './reducers';\r\nimport sagaMiddlewareRuns from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst configureStore = (): Store<CombinedState<any>, Action> => {\r\n  const store = createStore(\r\n    reducers(),\r\n    {},\r\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\r\n  );\r\n  sagaMiddlewareRuns(sagaMiddleware);\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\n// others\r\nimport { EFontNames } from './constants';\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n   margin: 0;\r\n   padding: 0;\r\n  }\r\n\r\n  html {\r\n    line-height: 1.15;\r\n    -webkit-text-size-adjust: 100%; \r\n  }\r\n\r\n  body {\r\n  background-color: #F9F9F9;\r\n    font-family: ${EFontNames.RUBIK}, sans-serif;\r\n    text-rendering: optimizeLegibility;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  html, body {\r\n    min-height: 100vh;\r\n  }\r\n\r\n  input, \r\n  header,\r\n  textarea, \r\n  a, \r\n  p, \r\n  span, \r\n  kbd {\r\n    font-family: ${EFontNames.RUBIK}, sans-serif;\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n\r\n  h1, \r\n  h2, \r\n  h3, \r\n  h4, \r\n  h5, \r\n  h6 {\r\n    font-family: ${EFontNames.NUNITO}, sans-serif;\r\n  }\r\n`;\r\n","// @ts-nocheck\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport 'antd/dist/antd.css';\r\n\r\n// components\r\nimport App from './components/App/App';\r\nimport Firebase from './components/Firebase/Firebase';\r\n\r\n// store\r\nimport configureStore from './store/configureStore';\r\n\r\n// styles\r\nimport GlobalStyle from './styles';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={configureStore()}>\r\n      <GlobalStyle />\r\n      <Firebase />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}
{"version":3,"sources":["store/words/actionsType.ts","store/words/actions.ts","components/Firebase/constants.ts","components/Firebase/enhanceFirebase.tsx","components/Firebase/services/databaseErrorHandler.ts","components/General/Button/constants.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","components/General/Button/ButtonStyled.tsx","components/General/Button/Button.tsx","components/DataEntry/Input/InputStyled.tsx","components/DataEntry/Input/Input.tsx","components/ListWords/ListWordsStyled.tsx","components/ListWords/ListWords.tsx","components/App/enhanceApp.tsx","components/App/App.tsx","store/words/reducer.ts","store/reducers.ts","components/Firebase/services/getRefDatabase.ts","store/words/saga.ts","store/words/watch.ts","store/sagas.ts","constants.ts","store/configureStore.ts","styles.tsx","index.tsx"],"names":["WordsActionsType","EDatabaseColumns","mapDispatchToProps","fetchWordsSuccess","payload","type","fetchWordsSuccessAction","enhanceFirebase","compose","connect","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ETypeButton","databaseErrorHandler","error","console","getData","values","keys","Object","data","i","length","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","ref","DataBaseColumns","words","database","on","useEffect","initializeApp","Button","styled","ButtonAnt","children","className","icon","onClick","size","PRIMARY","Input","InputAnt","disabled","onChange","placeholder","prefix","suffix","styles","value","ListWords","div","dispatch","useDispatch","useState","isFastEdit","english","setEnglish","polish","setPolish","isModalVisible","setModalVisible","useSelector","state","onSubmitHandler","addNewWord","clearInputs","onKeyEnterHandler","e","keyCode","window","addEventListener","removeEventListener","reverse","map","index","title","visible","okText","onOk","onCancel","target","mapStateToProps","createStructuredSelector","enhanceApp","initialState","action","reducers","createRootReducer","combineReducers","getRefDatabase","path","refDataBase","child","set","watchGroupedEndpoints","all","takeEvery","EFontNames","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","createGlobalStyle","RUBIK","NUNITO","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bddc906.chunk.js","sourcesContent":["export const REDUCER_KEY = 'groupedEndpoints';\n\nexport enum WordsActionsType {\n  fetchWordsSuccess = 'fetchWordsSuccess',\n  fetchWordsError = 'fetchWordsErorr',\n  addNewWord = 'addNewWord',\n  addNewWordSuccess = 'addNewWordSuccess',\n  addNewWordError = 'addNewWordSuccess',\n  editWord = 'editWord',\n  editWordSuccess = 'editWordSuccess',\n  editWordError = 'editWordError',\n  deleteWord = 'deleteWord',\n  deleteWordSuccess = 'deleteWordSuccess',\n  deleteWordError = 'deleteWordError',\n}\n","// @ts-nocheck\n// others\nimport { TFetchWords } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TAddNewWord, TFetchWordsSuccess } from './types';\n\nexport const fetchWordsSuccessAction = (\n  payload: Array<TFetchWords>\n): TFetchWordsSuccess => ({\n  type: WordsActionsType.fetchWordsSuccess,\n  payload,\n});\n\nexport const addNewWordAction = (\n  payload: Array<TAddNewWord>\n): TFetchWordsSuccess => ({\n  type: WordsActionsType.addNewWord,\n  payload,\n});\n","export const config = {\n  apiKey: 'AIzaSyA-VRLP3BsbsmqFPgwsqyV4dwmglIWSWKM',\n  authDomain: 'english-words-cb95b.firebaseapp.com',\n  databaseURL: 'https://english-words-cb95b-default-rtdb.firebaseio.com',\n  projectId: 'english-words-cb95b',\n  storageBucket: 'english-words-cb95b.appspot.com',\n  messagingSenderId: '180289885757',\n  appId: '1:180289885757:web:4e42c0ed923a6c4de93c54',\n};\n\nexport enum EDatabaseColumns {\n  words = 'words',\n}\n","import { connect } from 'react-redux';\nimport { compose } from 'recompose';\n\n// others\nimport { TWord } from '../../store/words/types';\nimport { TInnerProps } from './Firebase';\n\n// store\nimport { fetchWordsSuccessAction } from '../../store/words/actions';\n\nconst mapDispatchToProps = {\n  fetchWordsSuccess: (payload: Array<TWord>) =>\n    fetchWordsSuccessAction(payload),\n};\n\nexport const enhanceFirebase = compose<TInnerProps, null>(\n  connect(null, mapDispatchToProps)\n);\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","export enum ETypeButton {\n  PRIMARY = 'primary',\n  GHOST = 'ghost',\n  DASHED = 'dashed',\n  LINK = 'link',\n  TEXT = 'text',\n  DEFAULT = 'default',\n}\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { EDatabaseColumns as DataBaseColumns } from '../constants';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DataBaseColumns = DataBaseColumns.words\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: void) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport React, { FunctionComponent, useEffect } from 'react';\nimport firebase from 'firebase';\n\n// components\nimport { enhanceFirebase } from './enhanceFirebase';\n\n// others\nimport { config } from './constants';\nimport { TWord } from '../../store/words/types';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nexport type TInnerProps = {\n  fetchWordsSuccess: (payload: Array<TGroupedEndpoint>) => void;\n};\n\nconst Firebase: FunctionComponent<TInnerProps> = ({ fetchWordsSuccess }) => {\n  const actions = (payload: Array<TWord>): void => {\n    fetchWordsSuccess(payload);\n  };\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    databaseHandler(firebase, actions);\n  }, []);\n\n  return null;\n};\n\nexport default enhanceFirebase(Firebase);\n","// @ts-nocheck\nimport styled from 'styled-components';\nimport { Button as ButtonAnt } from 'antd';\n\n// styles\nimport { colors } from '../../../styles/colors';\n\nexport const Button = styled(ButtonAnt)``;\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\n\n// others\nimport { ETypeButton } from './constants';\n\n// styles\nimport { Button as ButtonStyled } from './ButtonStyled';\n\ntype TProps = {\n  children: React.ReactNode;\n  className?: string;\n  icon: React.ReactNode;\n  onClick: () => void;\n  size?: 'large' | 'middle' | 'small';\n  type?: ETypeButton;\n};\n\nconst Button: FunctionComponent<TProps> = ({\n  children = null,\n  className = '',\n  icon = null,\n  onClick = null,\n  size = 'small',\n  type = ETypeButton.PRIMARY,\n}) => {\n  return (\n    <ButtonStyled\n      className={className}\n      {...(icon ? { icon: icon } : {})}\n      onClick={onClick}\n      size={size}\n      type={type}\n    >\n      {children}\n    </ButtonStyled>\n  );\n};\n\nexport default Button;\n","// @ts-nocheck\nimport styled from 'styled-components';\nimport { Input as InputAnt } from 'antd';\n\nexport const Input = styled(InputAnt)``;\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\n\n// styles\nimport { Input as InputStyled } from './InputStyled';\n\ntype TProps = {\n  className?: string;\n  disabled?: boolean;\n  onChange?: (e: Event) => void;\n  placeholder?: string;\n  prefix?: React.ReactNode;\n  size?: 'large' | 'middle' | 'small';\n  suffix?: React.ReactNode;\n  styles?: any;\n  value?: string;\n};\n\nconst Input: FunctionComponent<TProps> = ({\n  className = '',\n  disabled = false,\n  onChange,\n  placeholder = '',\n  prefix,\n  size = 'small',\n  suffix = null,\n  styles = null,\n  value = '',\n}) => {\n  return (\n    <InputStyled\n      className={className}\n      disabled={disabled}\n      onChange={onChange}\n      placeholder={placeholder}\n      size={size}\n      styles={styles}\n      {...(suffix ? { suffix: suffix } : {})}\n      {...(prefix ? { prefix: prefix } : {})}\n      value={value}\n    />\n  );\n};\nexport default Input;\n","// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const ListWords = styled.div`\n  padding: 0 10px;\n\n  header {\n    padding: 15px;\n    text-align: center;\n  }\n`;\n","// @ts-nocheck\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Modal } from 'antd';\n\n// components\nimport Button from '../General/Button/Button';\nimport Input from '../DataEntry/Input/Input';\n\n// styles\nimport { ListWords as ListWordsStyled } from './ListWordsStyled';\n\n// store\nimport { addNewWordAction } from '../../store/words/actions';\n\nconst ListWords = () => {\n  const dispatch = useDispatch();\n  const [isFastEdit, setIsFastEdit] = useState(false);\n  const [english, setEnglish] = useState('');\n  const [polish, setPolish] = useState('');\n  const [isModalVisible, setModalVisible] = useState(false);\n  const words = useSelector((state) => state.words.data);\n\n  const onSubmitHandler = () => {\n    if (english && polish) {\n      dispatch(addNewWordAction([...words, { english, polish }]));\n      clearInputs();\n    }\n  };\n\n  const onCancelHandler = () => {\n    clearInputs();\n    setModalVisible(false);\n  };\n\n  const clearInputs = () => {\n    setEnglish('');\n    setPolish('');\n  };\n\n  const onKeyEnterHandler = (e): void => {\n    if (e.keyCode === 13 && isFastEdit) {\n      onSubmitHandler();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', onKeyEnterHandler);\n    return () => {\n      window.removeEventListener('keydown', onKeyEnterHandler);\n    };\n  }, [english, polish, isFastEdit]);\n\n  return (\n    <ListWordsStyled>\n      {/* HEADER */}\n      <header>\n        Do you need a new word?{' '}\n        <Button onClick={() => setModalVisible(true)}>Create</Button>\n      </header>\n\n      {/* TABLE */}\n      <div className=\"container demo\">\n        <table className=\"table table-no-more\">\n          <thead>\n            <tr>\n              <th>English</th>\n              <th>Polish</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {[...words].reverse().map(({ english, polish }, index) => (\n              <tr key={index}>\n                <td>{english}</td>\n                <td>{polish}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* MODAL ADD NEW WORD */}\n      <Modal\n        title=\"Add New Word\"\n        visible={isModalVisible}\n        okText=\"Create\"\n        onOk={() => {\n          onSubmitHandler();\n          setModalVisible(false);\n        }}\n        onCancel={onCancelHandler}\n      >\n        <label>English word:</label>\n        <Input\n          onChange={(e) => setEnglish(e.target.value)}\n          placeholder=\"English word:\"\n          size=\"middle\"\n          value={english}\n        />\n        <label>Polish word:</label>\n        <Input\n          onChange={(e) => setPolish(e.target.value)}\n          placeholder=\"Polish word:\"\n          size=\"middle\"\n          value={polish}\n        />\n      </Modal>\n    </ListWordsStyled>\n  );\n};\n\nexport default ListWords;\n","import { connect, Selector } from 'react-redux';\nimport { compose } from 'recompose';\nimport { createStructuredSelector } from 'reselect';\n\n// others\nimport { TInnerProps } from './App';\n\nconst mapStateToProps: Selector<any, any> = createStructuredSelector({});\n\nexport const enhanceApp = compose<TInnerProps, null>(\n  connect(mapStateToProps, null)\n);\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\n\n// components\nimport Firebase from '../Firebase/Firebase';\nimport ListWords from '../ListWords/ListWords';\nimport { enhanceApp } from './enhanceApp';\n\nexport type TInnerProps = {};\n\nconst App: FunctionComponent<TInnerProps> = () => {\n  return (\n    <>\n      <Firebase />\n      <ListWords />\n    </>\n  );\n};\n\nexport default enhanceApp(App);\n","// @ts-nocheck\n// others\nimport { TFetchWordsSuccess } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TWordsState as TWordsState } from './types';\n\nconst initialState: TWordsState = {\n  data: [],\n};\n\nconst fetchWordsSuccess = (\n  state: TWordsState,\n  action: TFetchWordsSuccess\n): TWordsState => ({\n  ...state,\n  data: action.payload,\n});\n\nconst words = (\n  state: TWordsState = initialState,\n  action: TAnyAction\n): TWordsState => {\n  switch (action.type) {\n    case WordsActionsType.fetchWordsSuccess:\n      return fetchWordsSuccess(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default words;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport words from './words/reducer';\n\nconst reducers = { words };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\nimport { put, PutEffect, select } from 'redux-saga/effects';\n\n// services\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { fetchWordsSuccessAction } from './actions';\n\nexport function* addNewWord(data): Generator<PutEffect<any>> {\n  try {\n    yield getRefDatabase(['words']).set(data.payload);\n  } catch (error) {\n    //yield put(addNotification(error, 'Add new endpoint', EFeedbackTypes.ERROR));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { addNewWord } from './saga';\nimport { WordsActionsType } from './actionsType';\nimport { TWord } from './types';\n\nexport function* watchGroupedEndpoints(): Generator<\n  AllEffect<ForkEffect<TWord>>\n> {\n  yield all([takeEvery(WordsActionsType.addNewWord, addNewWord)]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchGroupedEndpoints } from './words/watch';\n\nconst watches = [watchGroupedEndpoints];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","export enum EFontNames {\n  NUNITO = 'Nunito',\n  RUBIK = 'Rubik',\n}\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import { createGlobalStyle } from 'styled-components';\n\n// others\nimport { EFontNames } from './constants';\n\nexport default createGlobalStyle`\n  * {\n   margin:0;\n   padding:0;\n  }\n\n  html {\n    line-height: 1.15;\n    -webkit-text-size-adjust: 100%; \n  }\n\n  body {\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html, body, #root {\n    min-height: 100vh;\n  }\n\n  input, \n  header,\n  textarea, \n  a, \n  p, \n  span, \n  kbd {\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6 {\n    font-family: ${EFontNames.NUNITO}, sans-serif;\n  }\n\n  .table {\n    width: 100%;\n        overflow: hidden;\n        border-radius: 3px;\n        -webkit-box-shadow: 0 1px 6px 0 rgba(0,0,0,.12), 0 1px 6px 0 rgba(0,0,0,.12);\n           -moz-box-shadow: 0 1px 6px 0 rgba(0,0,0,.12), 0 1px 6px 0 rgba(0,0,0,.12);\n                box-shadow: 0 1px 6px 0 rgba(0,0,0,.12), 0 1px 6px 0 rgba(0,0,0,.12);\n    }\n\n    .table > thead > tr > th {\n        border-bottom-color: #EEEEEE;\n    }\n\n    .table > tbody > tr > td, \n    .table > tbody > tr > th,\n    .table > thead > tr > td, \n    .table > thead > tr > th {\n        padding: 15px;\n        border-top-color: #EEEEEE;\n    }\n\n    .table > tbody > tr:hover > td {\n        background-color: #FAFAFA;\n    }\n\n    tr:nth-child(even) {\n      background-color: #f9f9f9;\n    }\n\n    tr, th {\n      text-align: center;\n    }\n`;\n","// @ts-nocheck\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'antd/dist/antd.css';\n\n// components\nimport App from './components/App/App';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport GlobalStyle from './styles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
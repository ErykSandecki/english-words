{"version":3,"sources":["store/words/actionsType.ts","store/words/actions.ts","components/Firebase/constants.ts","components/Firebase/enhanceFirebase.tsx","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","components/ListWords/ListWords.tsx","components/App/enhanceApp.tsx","components/App/App.tsx","store/words/reducer.ts","store/reducers.ts","components/Firebase/services/getRefDatabase.ts","store/words/saga.ts","store/words/watch.ts","store/sagas.ts","constants.ts","store/configureStore.ts","styles.tsx","index.tsx"],"names":["WordsActionsType","EDatabaseColumns","mapDispatchToProps","fetchWordsSuccess","payload","type","fetchWordsSuccessAction","enhanceFirebase","compose","connect","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","data","i","length","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","ref","DataBaseColumns","words","database","on","useEffect","initializeApp","ListWords","mapStateToProps","createStructuredSelector","enhanceApp","initialState","state","action","reducers","groupedEndpoints","createRootReducer","combineReducers","getRefDatabase","path","refDataBase","child","addNewWord","set","watchGroupedEndpoints","all","takeEvery","EFontNames","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","createGlobalStyle","RUBIK","NUNITO","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIAEYA,E,mFAAAA,K,sCAAAA,E,kCAAAA,E,wBAAAA,E,sCAAAA,E,oCAAAA,E,oBAAAA,E,kCAAAA,E,8BAAAA,E,wBAAAA,E,sCAAAA,E,mCAAAA,M,KCML,ICEKC,ECANC,EAAqB,CACzBC,kBAAmB,SAACC,GAAD,OFHkB,SACrCA,GADqC,MAEb,CACxBC,KAAML,EAAiBG,kBACvBC,WEAEE,CAAwBF,KAGfG,EAAkBC,YAC7BC,YAAQ,KAAMP,IDhBHQ,EAAS,CACpBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,0DACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8C,SAGGhB,K,eAAAA,M,KEVZ,IAKeiB,EALc,SAACC,GAE5BC,QAAQD,MAAMA,ICDVE,EAAU,SAACC,GAIf,IAHA,IAAMC,EAAOC,OAAOD,KAAKD,GACnBG,EAAO,GAEJC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC/BD,EAAKG,KAAKN,EAAOC,EAAKG,KAExB,OAAOD,GAWMI,EARgB,SAC7BC,GAEU,IADVC,EACS,uDADsB,KAEzBT,EAASQ,EAASE,MACxBD,EAAQV,EAAQC,KCMHW,EAfS,SACtBC,EACAH,GAEI,IADJI,EACG,uDADoBC,EAAgBC,MAEvCH,EACGI,WACAH,IAAIA,GACJI,GACC,SACA,SAACT,GAAD,OAAoBD,EAAuBC,EAAUC,KACrDb,ICaSX,KAbkC,SAAC,GAA2B,IAAzBJ,EAAwB,EAAxBA,kBAC5C4B,EAAU,SAAC3B,GACfD,EAAkBC,IAQpB,OALAoC,qBAAU,WACRN,IAASO,cAAc/B,GACvBuB,EAAgBC,IAAUH,KACzB,IAEI,QCpBMW,EAJG,WAChB,OAAO,M,QCEHC,EAAsCC,YAAyB,ICYtDC,EDVWrC,YACxBC,YAAQkC,EAAiB,MCSZE,EAT6B,WAC1C,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,U,wCCLAC,EAA4B,CAChCrB,KAAM,IAGFtB,EAAoB,SACxB4C,EACAC,GAFwB,mBAAC,eAItBD,GAJqB,IAKxBtB,KAAMuB,EAAO5C,WCZT6C,EAAW,CAAEC,iBDeM,WAGN,IAFjBH,EAEgB,uDAFKD,EACrBE,EACgB,uCAChB,OAAQA,EAAO3C,MACb,KAAKL,EAAiBG,kBACpB,OAAOA,EAAkB4C,EAAOC,GAClC,QACE,OAAOD,KChBEI,EALW,kBACxBC,0BAAgB,eACXH,K,iCCAQI,EARQ,SAACC,GAEtB,IADA,IAAIC,EAAcrB,IAASI,WAAWH,IAAImB,EAAK,IACtC5B,EAAI,EAAGA,EAAI4B,EAAK3B,OAAQD,IAC/B6B,EAAcA,EAAYC,MAAMF,EAAK5B,IAEvC,OAAO6B,G,WCEQE,GAAV,SAAUA,EAAWhC,GAArB,iEAEH,OAFG,kBAEG4B,EAAeC,MAAMI,IAAI,IAF5B,0G,eCFUC,GAAV,SAAUA,IAAV,iEAGL,OAHK,SAGCC,YAAI,CAACC,YAAU7D,EAAiByD,WAAYA,KAH7C,uCCDP,ICNYK,EDMNC,EAAU,CAACJ,GAMFK,EAJY,SAACC,GAA0C,IAAD,gBAC/CF,GAD+C,IACnE,gCAAWG,EAAX,QAA6BD,EAAeE,IAAID,IADmB,gCEQ/DD,EAAiBG,cAaRC,EAXQ,WACrB,IAAMC,EAAQC,sBACZtB,IACA,GACAuB,8BAAoBC,kBAAe,WAAf,EAAmB,CAACC,KAApB,QAA4BT,OAIlD,OAFAD,EAAmBC,GAEZK,G,2pBD1BGR,K,gBAAAA,E,eAAAA,M,KEQGa,kBAAf,IAYmBb,EAAWc,MAgBXd,EAAWc,MAaXd,EAAWe,QClC9BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUV,MAAOD,IAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SAGJY,SAASC,eAAe,W","file":"static/js/main.b1eb8837.chunk.js","sourcesContent":["export const REDUCER_KEY = 'groupedEndpoints';\n\nexport enum WordsActionsType {\n  fetchWordsSuccess = 'fetchWordsSuccess',\n  fetchWordsError = 'fetchWordsErorr',\n  addNewWord = 'addNewWord',\n  addNewWordSuccess = 'addNewWordSuccess',\n  addNewWordError = 'addNewWordSuccess',\n  editWord = 'editWord',\n  editWordSuccess = 'editWordSuccess',\n  editWordError = 'editWordError',\n  deleteWord = 'deleteWord',\n  deleteWordSuccess = 'deleteWordSuccess',\n  deleteWordError = 'deleteWordError',\n}\n","// @ts-nocheck\n// others\nimport { TFetchWords } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TFetchWordsSuccess } from './types';\n\nexport const fetchWordsSuccessAction = (\n  payload: Array<TFetchWords>\n): TFetchWordsSuccess => ({\n  type: WordsActionsType.fetchWordsSuccess,\n  payload,\n});\n","export const config = {\n  apiKey: 'AIzaSyA-VRLP3BsbsmqFPgwsqyV4dwmglIWSWKM',\n  authDomain: 'english-words-cb95b.firebaseapp.com',\n  databaseURL: 'https://english-words-cb95b-default-rtdb.firebaseio.com',\n  projectId: 'english-words-cb95b',\n  storageBucket: 'english-words-cb95b.appspot.com',\n  messagingSenderId: '180289885757',\n  appId: '1:180289885757:web:4e42c0ed923a6c4de93c54',\n};\n\nexport enum EDatabaseColumns {\n  words = 'words',\n}\n","import { connect } from 'react-redux';\nimport { compose } from 'recompose';\n\n// others\nimport { TWord } from '../../store/words/types';\nimport { TInnerProps } from './Firebase';\n\n// store\nimport { fetchWordsSuccessAction } from '../../store/words/actions';\n\nconst mapDispatchToProps = {\n  fetchWordsSuccess: (payload: Array<TWord>) =>\n    fetchWordsSuccessAction(payload),\n};\n\nexport const enhanceFirebase = compose<TInnerProps, null>(\n  connect(null, mapDispatchToProps)\n);\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { EDatabaseColumns as DataBaseColumns } from '../constants';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DataBaseColumns = DataBaseColumns.words\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: void) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport React, { FunctionComponent, useEffect } from 'react';\nimport firebase from 'firebase';\n\n// components\nimport { enhanceFirebase } from './enhanceFirebase';\n\n// others\nimport { config } from './constants';\nimport { TWord } from '../../store/words/types';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nexport type TInnerProps = {\n  fetchWordsSuccess: (payload: Array<TGroupedEndpoint>) => void;\n};\n\nconst Firebase: FunctionComponent<TInnerProps> = ({ fetchWordsSuccess }) => {\n  const actions = (payload: Array<TWord>): void => {\n    fetchWordsSuccess(payload);\n  };\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    databaseHandler(firebase, actions);\n  }, []);\n\n  return null;\n};\n\nexport default enhanceFirebase(Firebase);\n","// @ts-nocheck\nimport React, { useState } from 'react';\nimport { Table } from 'antd';\n\nconst ListWords = () => {\n  return null;\n};\n\nexport default ListWords;\n","import { connect, Selector } from 'react-redux';\nimport { compose } from 'recompose';\nimport { createStructuredSelector } from 'reselect';\n\n// others\nimport { TInnerProps } from './App';\n\nconst mapStateToProps: Selector<any, any> = createStructuredSelector({});\n\nexport const enhanceApp = compose<TInnerProps, null>(\n  connect(mapStateToProps, null)\n);\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\n\n// components\nimport Firebase from '../Firebase/Firebase';\nimport ListWords from '../ListWords/ListWords';\nimport { enhanceApp } from './enhanceApp';\n\nexport type TInnerProps = {};\n\nconst App: FunctionComponent<TInnerProps> = () => {\n  return (\n    <>\n      <Firebase />\n      <ListWords />\n    </>\n  );\n};\n\nexport default enhanceApp(App);\n","// @ts-nocheck\n// others\nimport { TFetchWordsSuccess } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TWordsState as TWordsState } from './types';\n\nconst initialState: TWordsState = {\n  data: [],\n};\n\nconst fetchWordsSuccess = (\n  state: TWordsState,\n  action: TFetchWordsSuccess\n): TWordsState => ({\n  ...state,\n  data: action.payload,\n});\n\nconst groupedEndpoints = (\n  state: TWordsState = initialState,\n  action: TAnyAction\n): TWordsState => {\n  switch (action.type) {\n    case WordsActionsType.fetchWordsSuccess:\n      return fetchWordsSuccess(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default groupedEndpoints;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport groupedEndpoints from './words/reducer';\n\nconst reducers = { groupedEndpoints };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\nimport { put, PutEffect, select } from 'redux-saga/effects';\n\n// services\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { fetchWordsSuccessAction } from './actions';\n\nexport function* addNewWord(data): Generator<PutEffect<any>> {\n  try {\n    yield getRefDatabase(path).set('');\n  } catch (error) {\n    //yield put(addNotification(error, 'Add new endpoint', EFeedbackTypes.ERROR));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { addNewWord } from './saga';\nimport { WordsActionsType } from './actionsType';\nimport { TWord } from './types';\n\nexport function* watchGroupedEndpoints(): Generator<\n  AllEffect<ForkEffect<TWord>>\n> {\n  yield all([takeEvery(WordsActionsType.addNewWord, addNewWord)]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchGroupedEndpoints } from './words/watch';\n\nconst watches = [watchGroupedEndpoints];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","export enum EFontNames {\n  NUNITO = 'Nunito',\n  RUBIK = 'Rubik',\n}\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import { createGlobalStyle } from 'styled-components';\n\n// others\nimport { EFontNames } from './constants';\n\n// styles\nimport { colors } from './styles/colors';\n\nexport default createGlobalStyle`\n  * {\n   margin:0;\n   padding:0;\n  }\n\n  html {\n    line-height: 1.15;\n    -webkit-text-size-adjust: 100%; \n  }\n\n  body {\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html, body, #root {\n    min-height: 100vh;\n  }\n\n  input, \n  textarea, \n  a, \n  p, \n  span, \n  kbd {\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6 {\n    font-family: ${EFontNames.NUNITO}, sans-serif;\n  }\n`;\n","// @ts-nocheck\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'antd/dist/antd.css';\n\n// components\nimport App from './components/App/App';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport GlobalStyle from './styles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
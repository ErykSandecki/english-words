{"version":3,"sources":["components/DataEntry/Input/InputStyled.tsx","components/DataEntry/Input/Input.tsx","components/AddNewWordForm/AddNewWordFormStyled.tsx","store/words/actionsType.ts","store/words/actions.ts","components/App/constants.ts","store/words/selectors.ts","components/AddNewWordForm/AddNewWordForm.tsx","assets/images/empty-section.svg","components/ListWords/services/getFilteredWords.ts","components/ListWords/ListWordsStyled.tsx","components/ListWords/ListWords.tsx","assets/icons/plus.svg","assets/images/logo-neutral.svg","assets/images/header-background.svg","components/PageHeader/PageHeaderStyled.tsx","components/PageHeader/PageHeader.tsx","assets/images/logo.svg","components/PageLoader/PageLoaderStyled.tsx","components/PageLoader/PageLoader.tsx","assets/images/arrow-up.svg","services/scrollTop.ts","components/ScrollButton/ScrollButtonStyled.tsx","components/ScrollButton/ScrollButton.tsx","assets/icons/sort-alphabetically.svg","assets/icons/sort-alphabetically-selected.svg","assets/icons/sort-latest.svg","assets/icons/sort-latest-selected.svg","assets/icons/sort-oldest.svg","assets/icons/sort-oldest-selected.svg","assets/icons/sort-shuffle.svg","assets/icons/sort-shuffle-selected.svg","components/PageFooter/constants.ts","components/PageFooter/PageFooterStyled.tsx","components/PageFooter/PageFooter.tsx","components/App/AppStyled.tsx","components/Firebase/constants.ts","components/App/App.tsx","components/Firebase/enhanceFirebase.tsx","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/words/reducer.ts","store/reducers.ts","components/Firebase/services/getRefDatabase.ts","store/words/saga.ts","store/words/watch.ts","store/sagas.ts","constants.ts","store/configureStore.ts","styles.tsx","index.tsx"],"names":["Input","styled","InputAnt","forwardRef","ref","className","disabled","onChange","placeholder","prefix","size","suffix","styles","value","WordsActionsType","AddNewWordForm","div","FilterType","groupedEndpointsSelector","getFp","isPendingSelector","createSelector","getDataSelector","getListCategoriesSelector","data","map","name","getSumTotalWordsSelector","reduce","current","words","length","getListWordsSelector","index","isModalVisible","selectedCategory","setModalVisible","dispatch","useDispatch","useState","english","setEnglish","polish","setPolish","isPCMode","setIsPCMode","useSelector","refInputEnglishWord","useRef","onSubmitHandler","e","payload","preventDefault","categoryIndex","type","addNewWord","focus","clearInputs","title","visible","okText","onOk","onCancel","onSubmit","target","style","display","getFilteredWords","filterType","latest","reverse","alphabetically","sort","a","b","localeCompare","getSortedDataByAlphabetically","shuffle","randomIndex","prevValue","currentIndex","Math","floor","random","getShuffledData","ListWords","setSelectedCategory","categories","listWords","pending","onClick","alt","src","EmptySection","PageHeader","header","HeaderBackground","totalAmountWords","amountWords","LogoNeutral","PlusIcon","PageLoader","isPending","ReactDOM","createPortal","Logo","document","getElementById","scrollTop","window","scrollTo","top","behavior","ScrollButton","showButton","setShowButton","onScrollHandler","pageYOffset","useEffect","addEventListener","ArrowUp","buttons","unSelected","SortLatest","selected","SortLatestSelected","text","oldest","SortOldest","SortOldestSelected","SortShuffle","SortShuffleSelected","SortAlphabetically","SortAlphabeticallySelected","PageFooter","footer","currentFilterType","setFilterType","isSelectedFilter","setTimeout","onClickHandler","EDatabaseColumns","App","mapDispatchToProps","fetchWordsSuccess","fetchWordsSuccessAction","enhanceFirebase","compose","connect","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","i","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","DataBaseColumns","database","on","initializeApp","initialState","state","action","reducers","createRootReducer","combineReducers","getRefDatabase","path","refDataBase","child","set","watchGroupedEndpoints","all","takeEvery","EFontNames","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","createGlobalStyle","RUBIK","NUNITO","render","StrictMode"],"mappings":"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","file":"static/js/main.c4946c15.chunk.js","sourcesContent":["// @ts-nocheck\nimport styled from 'styled-components';\nimport { Input as InputAnt } from 'antd';\n\nexport const Input = styled(InputAnt)``;\n","// @ts-nocheck\nimport React, { FunctionComponent, forwardRef } from 'react';\n\n// styles\nimport { Input as InputStyled } from './InputStyled';\n\ntype TProps = {\n  className?: string;\n  disabled?: boolean;\n  onChange?: (e: Event) => void;\n  placeholder?: string;\n  prefix?: React.ReactNode;\n  ref?: React.RefObject<any>;\n  size?: 'large' | 'middle' | 'small';\n  suffix?: React.ReactNode;\n  styles?: any;\n  value?: string;\n};\n\nconst Input: FunctionComponent<TProps> = forwardRef(\n  (\n    {\n      className = '',\n      disabled = false,\n      onChange,\n      placeholder = '',\n      prefix,\n      size = 'small',\n      suffix = null,\n      styles = null,\n      value = '',\n    },\n    ref\n  ) => {\n    return (\n      <InputStyled\n        className={className}\n        disabled={disabled}\n        onChange={onChange}\n        placeholder={placeholder}\n        size={size}\n        styles={styles}\n        {...(prefix ? { prefix: prefix } : {})}\n        {...(ref ? { ref: ref } : {})}\n        {...(suffix ? { suffix: suffix } : {})}\n        value={value}\n      />\n    );\n  }\n);\n\nexport default Input;\n","// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const AddNewWordForm = styled.div`\n  padding: 0 10px;\n\n  header {\n    padding: 15px;\n    text-align: center;\n  }\n`;\n","export const REDUCER_KEY = 'words';\n\nexport enum WordsActionsType {\n  fetchWordsSuccess = 'fetchWordsSuccess',\n  fetchWordsError = 'fetchWordsErorr',\n  addNewWord = 'addNewWord',\n  addNewWordSuccess = 'addNewWordSuccess',\n  addNewWordError = 'addNewWordSuccess',\n  editWord = 'editWord',\n  editWordSuccess = 'editWordSuccess',\n  editWordError = 'editWordError',\n  deleteWord = 'deleteWord',\n  deleteWordSuccess = 'deleteWordSuccess',\n  deleteWordError = 'deleteWordError',\n}\n","// @ts-nocheck\n// others\nimport { TFetchWords } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TAddNewWord, TFetchWordsSuccess } from './types';\n\nexport const fetchWordsSuccessAction = (\n  payload: Array<TFetchWords>\n): TFetchWordsSuccess => ({\n  type: WordsActionsType.fetchWordsSuccess,\n  payload,\n});\n\nexport const addNewWordAction = (payload: {\n  categoryIndex: number;\n  words: Array<TAddNewWord>;\n}): TAddNewWord => ({\n  type: WordsActionsType.addNewWord,\n  payload,\n});\n","export enum FilterType {\n  latest,\n  oldest,\n  shuffle,\n  alphabetically,\n  pending,\n}\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// others\nimport { TFetchWords } from './types';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const groupedEndpointsSelector: Selector<\n  TMainState,\n  TLocationState\n> = getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  groupedEndpointsSelector,\n  getFp('isPending')\n);\n\nexport const getDataSelector: Selector<\n  TMainState,\n  Array<TFetchWords>\n> = createSelector(groupedEndpointsSelector, getFp('data'));\n\nexport const getListCategoriesSelector: Selector<\n  Array<TFetchWords>,\n  Array<string>\n> = createSelector(getDataSelector, (data) => data.map(({ name }) => name));\n\nexport const getSumTotalWordsSelector: Selector<\n  Array<TFetchWords>,\n  number\n> = createSelector(getDataSelector, (data) =>\n  data\n    ? data.reduce(\n        (current, { words }) => current + (words ? words.length : 0),\n        0\n      )\n    : 0\n);\n\nexport const getSumWordsFormCategorySelector = (\n  index: number\n): Selector<Array<TFetchWords>, number> =>\n  createSelector(getDataSelector, (data) => {\n    if (data.length > 0 && data[index].words) {\n      return data[index].words.length;\n    }\n    return 0;\n  });\n\nexport const getListWordsSelector = (\n  index: number\n): Selector<Array<TFetchWords>, number> =>\n  createSelector(getDataSelector, (data) => {\n    if (data.length > 0 && data[index].words) {\n      return data[index].words;\n    }\n    return [];\n  });\n","// @ts-nocheck\nimport React, { FunctionComponent, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Checkbox, Modal } from 'antd';\n\n// components\nimport Input from '../DataEntry/Input/Input';\n\n// styles\nimport { AddNewWordForm as AddNewWordFormStyled } from './AddNewWordFormStyled';\n\n// store\nimport { addNewWordAction } from '../../store/words/actions';\nimport { getListWordsSelector } from '../../store/words/selectors';\n\ntype TProps = {\n  isModalVisible: boolean;\n  selectedCategory: number;\n  setModalVisible: (flag: boolean) => void;\n};\n\nconst AddNewWordForm: FunctionComponent<TProps> = ({\n  isModalVisible,\n  selectedCategory,\n  setModalVisible,\n}) => {\n  const dispatch = useDispatch();\n  const [english, setEnglish] = useState('');\n  const [polish, setPolish] = useState('');\n  const [isPCMode, setIsPCMode] = useState(false);\n  const words = useSelector(getListWordsSelector(selectedCategory));\n  const refInputEnglishWord = useRef(null);\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (english && polish) {\n      dispatch(\n        addNewWordAction({\n          categoryIndex: selectedCategory,\n          words: [...words, { english, polish }],\n        })\n      );\n      refInputEnglishWord.current.focus();\n      clearInputs();\n\n      if (!isPCMode) {\n        setModalVisible(false);\n      }\n    }\n  };\n\n  const onCancelHandler = () => {\n    clearInputs();\n    setModalVisible(false);\n  };\n\n  const clearInputs = () => {\n    setEnglish('');\n    setPolish('');\n  };\n\n  return (\n    <Modal\n      title=\"Add New Word\"\n      visible={isModalVisible}\n      okText=\"Create\"\n      onOk={onSubmitHandler}\n      onCancel={onCancelHandler}\n    >\n      <AddNewWordFormStyled>\n        <form onSubmit={onSubmitHandler}>\n          <label>English word:</label>\n          <Input\n            onChange={(e) => setEnglish(e.target.value)}\n            placeholder=\"English word:\"\n            ref={refInputEnglishWord}\n            size=\"middle\"\n            value={english}\n          />\n          <br />\n          <br />\n          <label>Polish word:</label>\n          <Input\n            onChange={(e) => setPolish(e.target.value)}\n            placeholder=\"Polish word:\"\n            size=\"middle\"\n            value={polish}\n          />\n          <br />\n          <br />\n          <Checkbox onChange={() => setIsPCMode(!isPCMode)}>PC mode</Checkbox>\n          {/* REQUIRED TO WORK FORM HANDLER AFTER PRESS ENTER */}\n          <button style={{ display: 'none' }} type=\"submit\" />\n        </form>\n      </AddNewWordFormStyled>\n    </Modal>\n  );\n};\n\nexport default AddNewWordForm;\n","export default __webpack_public_path__ + \"static/media/empty-section.d269f6e5.svg\";","// others\nimport { FilterType } from '../../App/constants';\nimport { TWord } from '../../../store/words/types';\n\nconst getShuffledData = (data: Array<TWord>): Array<TWord> => {\n  let randomIndex, prevValue, currentIndex;\n  for (currentIndex = data.length - 1; currentIndex > 0; currentIndex--) {\n    randomIndex = Math.floor(Math.random() * (currentIndex + 1));\n    prevValue = data[currentIndex];\n    data[currentIndex] = data[randomIndex];\n    data[randomIndex] = prevValue;\n  }\n  return data;\n};\n\nconst getSortedDataByAlphabetically = (data: Array<TWord>): Array<TWord> =>\n  [...data].sort(({ english: a }, { english: b }) => a.localeCompare(b));\n\nconst getFilteredWords = (\n  filterType: FilterType,\n  data: Array<TWord>\n): Array<TWord> => {\n  switch (filterType) {\n    case FilterType.latest:\n      return [...data].reverse();\n    case FilterType.alphabetically:\n      return getSortedDataByAlphabetically(data);\n    case FilterType.shuffle:\n      return getShuffledData([...data]);\n    default:\n      return data;\n  }\n};\n\nexport default getFilteredWords;\n","// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const ListWords = styled.div`\n  margin-top: 60px;\n  padding-bottom: 50px;\n\n  nav {\n    display: inline-flex;\n    margin-left: 10%;\n    max-width: 100%;\n    padding: 10px 0;\n    overflow-x: auto;\n\n    & > p {\n      margin: 0 10px;\n      padding: 0 10px;\n      position: relative;\n      white-space: nowrap;\n\n      &.selected {\n        color: #009add;\n\n        &::after {\n          content: '';\n          position: absolute;\n          bottom: -10px;\n          left: 0;\n          width: 100%;\n          background-color: #009add;\n          height: 2px;\n        }\n      }\n    }\n  }\n\n  .word-wrapper {\n    background-color: #fff;\n    border-radius: 5px;\n    margin: 20px 10%;\n    padding: 10px 25px;\n    position: relative;\n\n    &::before {\n      background-color: #009add;\n      border-bottom-left-radius: 5px;\n      border-top-left-radius: 5px;\n      content: '';\n      height: 100%;\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 3px;\n    }\n\n    &:nth-child(odd)::before {\n      background-color: #82b632;\n    }\n\n    & > p {\n      text-transform: capitalize;\n    }\n\n    & > p:first-of-type {\n      color: #676c72;\n      font-weight: 600;\n      font-size: 16px;\n    }\n\n    & > p:last-of-type {\n      color: #a2a8b1;\n      font-size: 12px;\n    }\n\n    & > span {\n      bottom: 10px;\n      color: #009add;\n      font-size: 10px;\n      position: absolute;\n      right: 25px;\n    }\n  }\n\n  .empty-section {\n    margin-top: 50px;\n    text-align: center;\n  }\n`;\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport EmptySection from '../../assets/images/empty-section.svg';\nimport { FilterType } from '../App/constants';\n\n// services\nimport getFilteredWords from './services/getFilteredWords';\n\n// store\nimport {\n  getListCategoriesSelector,\n  getListWordsSelector,\n} from '../../store/words/selectors';\n// styles\nimport { ListWords as ListWordsStyled } from './ListWordsStyled';\n\ntype TProps = {\n  filterType: FilterType;\n  selectedCategory: number;\n  setSelectedCategory: (index: number) => void;\n};\n\nconst ListWords: FunctionComponent<TProps> = ({\n  filterType,\n  selectedCategory,\n  setSelectedCategory,\n}) => {\n  const categories = useSelector(getListCategoriesSelector);\n  const listWords = useSelector(getListWordsSelector(selectedCategory));\n\n  if (filterType === FilterType.pending) {\n    return null;\n  }\n\n  return (\n    <ListWordsStyled>\n      {/* NAV CATEGORY */}\n      <nav>\n        {categories.map((name, index) => (\n          <p\n            className={selectedCategory === index ? 'selected' : ''}\n            onClick={() => setSelectedCategory(index)}\n            key={index}\n          >\n            {name}\n          </p>\n        ))}\n      </nav>\n\n      {/* WORDS */}\n      {listWords.length > 0 ? (\n        getFilteredWords(filterType, listWords).map(\n          ({ english, polish }, index) => (\n            <div key={index} className=\"word-wrapper\">\n              <p>{english}</p>\n              <p>{polish}</p>\n              <span>{categories[selectedCategory]}</span>\n            </div>\n          )\n        )\n      ) : (\n        <div className=\"empty-section\">\n          <img alt=\"empty-section\" src={EmptySection} />\n        </div>\n      )}\n    </ListWordsStyled>\n  );\n};\n\nexport default ListWords;\n","export default __webpack_public_path__ + \"static/media/plus.72baf2a6.svg\";","export default __webpack_public_path__ + \"static/media/logo-neutral.4c4a4760.svg\";","export default __webpack_public_path__ + \"static/media/header-background.60c9dc30.svg\";","// @ts-nocheck\nimport styled from 'styled-components';\n\n// others\nimport HeaderBackground from '../../assets/images/header-background.svg';\n\nexport const PageHeader = styled.header`\n  background-image: url(${HeaderBackground});\n  height: 90px;\n  padding: 10px 15px 0 15px;\n  position: relative;\n\n  .wrapper-items {\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n\n    & > img:first-of-type {\n      height: 36px;\n      width: 32px;\n    }\n\n    & > h3 {\n      color: #fff;\n      font-weight: 600;\n      margin: 0;\n      text-align: center;\n    }\n\n    & > img:last-of-type {\n      height: 15px;\n      width: 15px;\n    }\n  }\n\n  .statistic-container {\n    align-items: center;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 5px 9px -3px #00000047;\n    display: flex;\n    height: 70px;\n    justify-content: space-between;\n    left: 10%;\n    padding: 10px;\n    position: absolute;\n    top: 65px;\n    width: 80%;\n  }\n\n  .statistic-wrapper {\n    text-align: center;\n    & > p {\n      color: #46494e;\n      font-weight: bold;\n    }\n\n    & > span {\n      color: #747575;\n      font-size: 12px;\n    }\n  }\n`;\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport PlusIcon from '../../assets/icons/plus.svg';\nimport LogoNeutral from '../../assets/images/logo-neutral.svg';\n\n// store\nimport {\n  getSumTotalWordsSelector,\n  getSumWordsFormCategorySelector,\n} from '../../store/words/selectors';\n\n// styles\nimport { PageHeader as PageHeaderStyled } from './PageHeaderStyled';\n\ntype TProps = {\n  selectedCategory: number;\n  setModalVisible: (flag: boolean) => void;\n};\n\nconst PageHeader: FunctionComponent<TProps> = ({\n  selectedCategory,\n  setModalVisible,\n}) => {\n  const totalAmountWords = useSelector(getSumTotalWordsSelector);\n  const amountWords = useSelector(\n    getSumWordsFormCategorySelector(selectedCategory)\n  );\n\n  return (\n    <PageHeaderStyled>\n      <div className=\"wrapper-items\">\n        {/* ICON */}\n        <img alt=\"logo-neutral\" src={LogoNeutral} />\n\n        {/* TITLE */}\n        <h3>English Words</h3>\n\n        {/* ICON */}\n        <img\n          alt=\"plus-icon\"\n          onClick={() => setModalVisible(true)}\n          src={PlusIcon}\n        />\n      </div>\n\n      {/* STATISTICS */}\n      <div className=\"statistic-container\">\n        <div className=\"statistic-wrapper\">\n          <p>{totalAmountWords}</p>\n          <span>Total Words</span>\n        </div>\n        <div className=\"statistic-wrapper\">\n          <p>{amountWords}</p>\n          <span>Words In This Section</span>\n        </div>\n      </div>\n    </PageHeaderStyled>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/logo.1995ca23.svg\";","// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const PageLoader = styled.div`\n  background-color: #fff;\n  height: 100vh;\n  left: 0;\n  position: fixed;\n  pointer-events: none;\n  top: 0;\n  transition: 2s linear;\n  width: 100%;\n  z-index: 10;\n\n  ${({ isPending }) => !isPending && 'opacity: 0; visibility: hidden;'}\n\n  .loader {\n    animation: spinr 1.5s linear infinite;\n    border: 1px solid transparent;\n    border-radius: 50%;\n    border-top-color: #009add;\n    display: block;\n    height: 150px;\n    left: 50%;\n    margin: -75px 0 0 -75px;\n    position: relative;\n    top: 40%;\n    width: 150px;\n    -moz-animation: spinr 1.5s linear infinite;\n    -moz-border-radius: 50%;\n    -o-animation: spinr 1.5s linear infinite;\n    -webkit-animation: spinr 1.5s linear infinite;\n    -webkit-border-radius: 50%;\n\n    &::after {\n      animation: spinr 1s linear infinite;\n      border: 1px solid transparent;\n      border-radius: 50%;\n      border-top-color: #82b632;\n      bottom: 30px;\n      content: '';\n      left: 30px;\n      position: absolute;\n      right: 30px;\n      top: 30px;\n      -moz-animation: spinr 1s linear infinite;\n      -moz-border-radius: 50%;\n      -o-animation: spinr 1s linear infinite;\n      -webkit-animation: spinr 1s linear infinite;\n      -webkit-border-radius: 50%;\n    }\n\n    &::before {\n      animation: spinl 0.5s linear infinite;\n      border: 1px solid transparent;\n      border-radius: 50%;\n      border-top-color: #009add;\n      bottom: 15px;\n      content: '';\n      left: 15px;\n      position: absolute;\n      right: 15px;\n      top: 15px;\n      -moz-animation: spinl 0.5s linear infinite;\n      -moz-border-radius: 50%;\n      -o-animation: spinl 0.5s linear infinite;\n      -webkit-animation: spinl 0.5s linear infinite;\n      -webkit-border-radius: 50%;\n    }\n  }\n\n  .logo {\n    position: absolute;\n    left: 50%;\n    top: 40%;\n    transform: translate(-50%, -50%);\n  }\n\n  @-webkit-keyframes spinr {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n\n  @-moz-keyframes spinr {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n\n  @-o-keyframes spinr {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -o-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -o-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n\n  @keyframes spinr {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      -o-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      -o-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinl {\n    0% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n    100% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n  }\n\n  @-moz-keyframes spinl {\n    0% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n    100% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n  }\n\n  @-o-keyframes spinl {\n    0% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -o-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n    100% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -o-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n  }\n\n  @keyframes spinl {\n    0% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      -o-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n    100% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      -o-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n  }\n`;\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\nimport ReactDOM from 'react-dom';\n\n// others\nimport Logo from '../../assets/images/logo.svg';\n\n// styles\nimport { PageLoader as PageLoaderStyled } from './PageLoaderStyled';\n\ntype TProps = {\n  isPending: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ isPending }) =>\n  ReactDOM.createPortal(\n    <PageLoaderStyled isPending={isPending}>\n      {/* SPINNER */}\n      <div className=\"loader\" />\n\n      {/* LOGO */}\n      <img alt=\"logo\" className=\"logo\" src={Logo} />\n    </PageLoaderStyled>,\n    document.getElementById('pageLoader')\n  );\n\nexport default PageLoader;\n","export default __webpack_public_path__ + \"static/media/arrow-up.5926e008.svg\";","const scrollTop = (): void => {\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n};\n\nexport default scrollTop;\n","// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const ScrollButton = styled.div`\n  align-items: center;\n  background-color: #646464;\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  bottom: 150px;\n  display: flex;\n  height: 40px;\n  justify-content: center;\n  position: fixed;\n  right: 0;\n  width: 40px;\n  z-index: 10;\n`;\n","import React, { FunctionComponent, useEffect, useState } from 'react';\n\n// others\nimport ArrowUp from '../../assets/images/arrow-up.svg';\n\n// services\nimport scrollTop from '../../services/scrollTop';\n\n// styles\nimport { ScrollButton as ScrollButtonStyled } from './ScrollButtonStyled';\n\nconst ScrollButton: FunctionComponent = () => {\n  const [showButton, setShowButton] = useState(false);\n\n  const onClickHandler = (): void => {\n    scrollTop();\n    setShowButton(false);\n  };\n\n  const onScrollHandler = () => {\n    if (window.pageYOffset > 400) {\n      setShowButton(true);\n    } else if (window.pageYOffset <= 400) {\n      setShowButton(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScrollHandler);\n    // eslint-disable-next-line\n  }, []);\n\n  if (!showButton) {\n    return null;\n  }\n\n  return (\n    <ScrollButtonStyled onClick={onClickHandler}>\n      <img alt=\"arrow-up\" src={ArrowUp} />\n    </ScrollButtonStyled>\n  );\n};\n\nexport default ScrollButton;\n","export default __webpack_public_path__ + \"static/media/sort-alphabetically.27ca50d5.svg\";","export default __webpack_public_path__ + \"static/media/sort-alphabetically-selected.b31750c1.svg\";","export default __webpack_public_path__ + \"static/media/sort-latest.6da2e5c9.svg\";","export default __webpack_public_path__ + \"static/media/sort-latest-selected.e016e239.svg\";","export default __webpack_public_path__ + \"static/media/sort-oldest.d66328ec.svg\";","export default __webpack_public_path__ + \"static/media/sort-oldest-selected.356b7137.svg\";","export default __webpack_public_path__ + \"static/media/sort-shuffle.cb2c48e6.svg\";","export default __webpack_public_path__ + \"static/media/sort-shuffle-selected.ca1eb407.svg\";","// others\nimport SortAlphabetically from '../../assets/icons/sort-alphabetically.svg';\nimport SortAlphabeticallySelected from '../../assets/icons/sort-alphabetically-selected.svg';\nimport SortLatest from '../../assets/icons/sort-latest.svg';\nimport SortLatestSelected from '../../assets/icons/sort-latest-selected.svg';\nimport SortOldest from '../../assets/icons/sort-oldest.svg';\nimport SortOldestSelected from '../../assets/icons/sort-oldest-selected.svg';\nimport SortShuffle from '../../assets/icons/sort-shuffle.svg';\nimport SortShuffleSelected from '../../assets/icons/sort-shuffle-selected.svg';\nimport { FilterType } from './../App/constants';\n\nexport const buttons = [\n  {\n    alt: 'sort-latest',\n    filterType: FilterType.latest,\n    src: {\n      unSelected: SortLatest,\n      selected: SortLatestSelected,\n    },\n    text: 'Latest',\n  },\n  {\n    alt: 'sort-oldest',\n    filterType: FilterType.oldest,\n    src: {\n      unSelected: SortOldest,\n      selected: SortOldestSelected,\n    },\n    text: 'Oldest',\n  },\n  {\n    alt: 'sort-shuffle',\n    filterType: FilterType.shuffle,\n    src: {\n      unSelected: SortShuffle,\n      selected: SortShuffleSelected,\n    },\n    text: 'shuffle',\n  },\n  {\n    alt: 'sort-alphabetically',\n    filterType: FilterType.alphabetically,\n    src: {\n      unSelected: SortAlphabetically,\n      selected: SortAlphabeticallySelected,\n    },\n    text: 'Alphabetically',\n  },\n];\n","// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const PageFooter = styled.footer`\n  align-items: center;\n  background-color: #fff;\n  bottom: 0;\n  box-shadow: 0 -2px 9px -3px #00000047;\n  display: flex;\n  height: 50px;\n  justify-content: space-around;\n  left: 0;\n  position: fixed;\n  width: 100%;\n\n  .filter-button {\n    text-align: center;\n  }\n\n  .selected {\n    color: #009add;\n  }\n`;\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\n// others\nimport { buttons } from './constants';\nimport { FilterType } from '../App/constants';\n// services\nimport scrollTop from '../../services/scrollTop';\n// styles\nimport { PageFooter as PageFooterStyled } from './PageFooterStyled';\n\ntype TProps = {\n  filterType: FilterType;\n  setFilterType: (filterType: FilterType) => void;\n};\n\nconst PageFooter: FunctionComponent<TProps> = ({\n  filterType: currentFilterType,\n  setFilterType,\n}) => {\n  const onClickHandler = (filterType: FilterType): void => {\n    if (filterType !== currentFilterType || filterType === FilterType.shuffle) {\n      scrollTop();\n      setFilterType(FilterType.pending);\n      setTimeout(() => setFilterType(filterType), 500);\n    }\n  };\n\n  return (\n    <PageFooterStyled>\n      {buttons.map(\n        ({ alt, filterType, src: { selected, unSelected }, text }, index) => {\n          const isSelectedFilter = currentFilterType === index;\n          return (\n            <div\n              className=\"filter-button\"\n              onClick={() => onClickHandler(filterType)}\n              key={index}\n            >\n              <img alt={alt} src={isSelectedFilter ? selected : unSelected} />\n              <p className={isSelectedFilter ? 'selected' : ''}>{text}</p>\n            </div>\n          );\n        }\n      )}\n    </PageFooterStyled>\n  );\n};\n\nexport default PageFooter;\n","// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const App = styled.div`\n  .overlay {\n    align-items: center;\n    background-color: rgba(255, 255, 255, 0.7);\n    display: flex;\n    height: 100vh;\n    justify-content: center;\n    left: 0;\n    position: fixed;\n    top: 0;\n    z-index: 15;\n    width: 100%;\n  }\n`;\n","export const config = {\n  apiKey: 'AIzaSyA-VRLP3BsbsmqFPgwsqyV4dwmglIWSWKM',\n  authDomain: 'english-words-cb95b.firebaseapp.com',\n  databaseURL: 'https://english-words-cb95b-default-rtdb.firebaseio.com',\n  projectId: 'english-words-cb95b',\n  storageBucket: 'english-words-cb95b.appspot.com',\n  messagingSenderId: '180289885757',\n  appId: '1:180289885757:web:4e42c0ed923a6c4de93c54',\n};\n\nexport enum EDatabaseColumns {\n  categories = 'categories',\n}\n","// @ts-nocheck\nimport React, { FunctionComponent, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Space, Spin } from 'antd';\n\n// components\nimport AddNewWordForm from '../AddNewWordForm/AddNewWordForm';\nimport ListWords from '../ListWords/ListWords';\nimport PageHeader from '../PageHeader/PageHeader';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// others\nimport { FilterType } from './constants';\n\n// store\nimport { isPendingSelector } from '../../store/words/selectors';\nimport ScrollButton from '../ScrollButton/ScrollButton';\nimport PageFooter from '../PageFooter/PageFooter';\n\n// styles\nimport { App as AppStyled } from './AppStyled';\n\nconst App: FunctionComponent<{}> = () => {\n  const [selectedCategory, setSelectedCategory] = useState(0);\n  const isPending = useSelector(isPendingSelector);\n  const [filterType, setFilterType] = useState(FilterType.latest);\n  const [isModalVisible, setModalVisible] = useState(false);\n\n  return (\n    <AppStyled>\n      <PageLoader isPending={isPending} />\n      {!isPending && (\n        <>\n          {/* OVERLAY */}\n          {filterType === FilterType.pending && (\n            <div className=\"overlay\">\n              <Space size=\"middle\">\n                <Spin size=\"large\" />\n              </Space>\n            </div>\n          )}\n\n          {/* ADD NEW WORD FORM */}\n          <AddNewWordForm\n            isModalVisible={isModalVisible}\n            selectedCategory={selectedCategory}\n            setModalVisible={setModalVisible}\n          />\n\n          {/* SCROLL BUTTON */}\n          <ScrollButton />\n\n          {/* PAGE HEADER */}\n          <PageHeader\n            selectedCategory={selectedCategory}\n            setModalVisible={setModalVisible}\n          />\n\n          {/* WORDS */}\n          <ListWords\n            filterType={filterType}\n            selectedCategory={selectedCategory}\n            setSelectedCategory={setSelectedCategory}\n          />\n\n          {/* FOOTER */}\n          <PageFooter filterType={filterType} setFilterType={setFilterType} />\n        </>\n      )}\n    </AppStyled>\n  );\n};\n\nexport default App;\n","import { connect } from 'react-redux';\nimport { compose } from 'recompose';\n\n// others\nimport { TWord } from '../../store/words/types';\nimport { TInnerProps } from './Firebase';\n\n// store\nimport { fetchWordsSuccessAction } from '../../store/words/actions';\n\nconst mapDispatchToProps = {\n  fetchWordsSuccess: (payload: Array<TWord>) =>\n    fetchWordsSuccessAction(payload),\n};\n\nexport const enhanceFirebase = compose<TInnerProps, null>(\n  connect(null, mapDispatchToProps)\n);\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { EDatabaseColumns as DataBaseColumns } from '../constants';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DataBaseColumns = DataBaseColumns.categories\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: void) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport firebase from 'firebase';\n\n// components\nimport { enhanceFirebase } from './enhanceFirebase';\n\n// others\nimport { config } from './constants';\nimport { TWord } from '../../store/words/types';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nexport type TInnerProps = {\n  fetchWordsSuccess: (payload: Array<TGroupedEndpoint>) => void;\n};\n\nconst Firebase: FunctionComponent<TInnerProps> = ({ fetchWordsSuccess }) => {\n  const actions = (payload: Array<TWord>): void => {\n    fetchWordsSuccess(payload);\n  };\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    databaseHandler(firebase, actions);\n    // eslint-disable-next-line\n  }, []);\n\n  return null;\n};\n\nexport default enhanceFirebase(Firebase);\n","// @ts-nocheck\n// others\nimport { TFetchWordsSuccess } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TWordsState } from './types';\n\nconst initialState: TWordsState = {\n  data: [],\n  isPending: true,\n};\n\nconst fetchWordsSuccess = (\n  state: TWordsState,\n  action: TFetchWordsSuccess\n): TWordsState => ({\n  ...state,\n  data: action.payload,\n  isPending: false,\n});\n\nconst words = (\n  state: TWordsState = initialState,\n  action: TAnyAction\n): TWordsState => {\n  switch (action.type) {\n    case WordsActionsType.fetchWordsSuccess:\n      return fetchWordsSuccess(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default words;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport words from './words/reducer';\n\nconst reducers = { words };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\nimport { PutEffect } from 'redux-saga/effects';\n\n// services\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\nexport function* addNewWord(data): Generator<PutEffect<any>> {\n  const { categoryIndex, words } = data.payload;\n\n  try {\n    yield getRefDatabase(['categories', categoryIndex, 'words']).set(words);\n  } catch (error) {}\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { addNewWord } from './saga';\nimport { WordsActionsType } from './actionsType';\nimport { TWord } from './types';\n\nexport function* watchGroupedEndpoints(): Generator<\n  AllEffect<ForkEffect<TWord>>\n> {\n  yield all([takeEvery(WordsActionsType.addNewWord, addNewWord)]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchGroupedEndpoints } from './words/watch';\n\nconst watches = [watchGroupedEndpoints];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","export enum EFontNames {\n  NUNITO = 'Nunito',\n  RUBIK = 'Rubik',\n}\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import { createGlobalStyle } from 'styled-components';\n\n// others\nimport { EFontNames } from './constants';\n\nexport default createGlobalStyle`\n  * {\n   margin: 0;\n   padding: 0;\n  }\n\n  html {\n    line-height: 1.15;\n    -webkit-text-size-adjust: 100%; \n  }\n\n  body {\n  background-color: #F9F9F9;\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html, body {\n    min-height: 100vh;\n  }\n\n  input, \n  header,\n  textarea, \n  a, \n  p, \n  span, \n  kbd {\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6 {\n    font-family: ${EFontNames.NUNITO}, sans-serif;\n  }\n`;\n","// @ts-nocheck\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'antd/dist/antd.css';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport GlobalStyle from './styles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <GlobalStyle />\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
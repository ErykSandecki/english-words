{"version":3,"sources":["store/words/actionsType.ts","store/words/selectors.ts","components/ListWords/ListWordsStyled.tsx","components/ListWords/ListWords.tsx","assets/icons/plus.svg","assets/images/logo-neutral.svg","assets/images/header-background.svg","components/PageHeader/PageHeaderStyled.tsx","components/PageHeader/PageHeader.tsx","assets/images/logo.svg","components/PageLoader/PageLoaderStyled.tsx","components/Firebase/constants.ts","components/PageLoader/PageLoader.tsx","components/App/enhanceApp.tsx","components/App/App.tsx","components/Firebase/enhanceFirebase.tsx","store/words/actions.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/words/reducer.ts","store/reducers.ts","components/Firebase/services/getRefDatabase.ts","store/words/saga.ts","store/words/watch.ts","store/sagas.ts","constants.ts","store/configureStore.ts","styles.tsx","index.tsx"],"names":["WordsActionsType","groupedEndpointsSelector","getFp","isPendingSelector","createSelector","getDataSelector","getListCategoriesSelector","data","map","name","getSumTotalWordsSelector","reduce","current","words","length","ListWords","styled","div","index","selectedCategory","setSelectedCategory","categories","useSelector","listWords","className","onClick","english","polish","PageHeader","header","HeaderBackground","totalAmountWords","amountWords","alt","src","LogoNeutral","PlusIcon","EDatabaseColumns","PageLoader","isPending","ReactDOM","createPortal","Logo","document","getElementById","mapStateToProps","createStructuredSelector","enhanceApp","compose","connect","useState","mapDispatchToProps","fetchWordsSuccess","payload","type","fetchWordsSuccessAction","enhanceFirebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","i","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","ref","DataBaseColumns","database","on","useEffect","initializeApp","initialState","state","action","reducers","createRootReducer","combineReducers","getRefDatabase","path","refDataBase","child","addNewWord","set","watchGroupedEndpoints","all","takeEvery","EFontNames","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","createGlobalStyle","RUBIK","NUNITO","render","StrictMode"],"mappings":"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","file":"static/js/main.ac94618b.chunk.js","sourcesContent":["export const REDUCER_KEY = 'words';\n\nexport enum WordsActionsType {\n  fetchWordsSuccess = 'fetchWordsSuccess',\n  fetchWordsError = 'fetchWordsErorr',\n  addNewWord = 'addNewWord',\n  addNewWordSuccess = 'addNewWordSuccess',\n  addNewWordError = 'addNewWordSuccess',\n  editWord = 'editWord',\n  editWordSuccess = 'editWordSuccess',\n  editWordError = 'editWordError',\n  deleteWord = 'deleteWord',\n  deleteWordSuccess = 'deleteWordSuccess',\n  deleteWordError = 'deleteWordError',\n}\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// others\nimport { TFetchWords } from './types';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const groupedEndpointsSelector: Selector<\n  TMainState,\n  TLocationState\n> = getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  groupedEndpointsSelector,\n  getFp('isPending')\n);\n\nexport const getDataSelector: Selector<\n  TMainState,\n  Array<TFetchWords>\n> = createSelector(groupedEndpointsSelector, getFp('data'));\n\nexport const getListCategoriesSelector: Selector<\n  Array<TFetchWords>,\n  Array<string>\n> = createSelector(getDataSelector, (data) => data.map(({ name }) => name));\n\nexport const getSumTotalWordsSelector: Selector<\n  Array<TFetchWords>,\n  number\n> = createSelector(getDataSelector, (data) =>\n  data\n    ? data.reduce(\n        (current, { words }) => current + (words ? words.length : 0),\n        0\n      )\n    : 0\n);\n\nexport const getSumWordsFormCategorySelector = (\n  index: number\n): Selector<Array<TFetchWords>, number> =>\n  createSelector(getDataSelector, (data) => {\n    if (data.length > 0 && data[index].words) {\n      return data[index].words.length;\n    }\n    return 0;\n  });\n\nexport const getListWordsSelector = (\n  index: number\n): Selector<Array<TFetchWords>, number> =>\n  createSelector(getDataSelector, (data) => {\n    if (data.length > 0 && data[index].words) {\n      return data[index].words;\n    }\n    return [];\n  });\n","// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const ListWords = styled.div`\n  margin-top: 60px;\n\n  nav {\n    display: inline-flex;\n    margin-left: 10%;\n    max-width: 100%;\n    padding: 10px 0;\n    overflow-x: auto;\n\n    & > p {\n      margin: 0 10px;\n      padding: 0 10px;\n      position: relative;\n      white-space: nowrap;\n\n      &.selected {\n        color: #009add;\n\n        &::after {\n          content: '';\n          position: absolute;\n          bottom: -10px;\n          left: 0;\n          width: 100%;\n          background-color: #009add;\n          height: 2px;\n        }\n      }\n    }\n  }\n\n  .word-wrapper {\n    background-color: #fff;\n    border-radius: 5px;\n    margin: 20px 10%;\n    padding: 10px 25px;\n    position: relative;\n\n    &::before {\n      background-color: #009add;\n      border-bottom-left-radius: 5px;\n      border-top-left-radius: 5px;\n      content: '';\n      height: 100%;\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 3px;\n    }\n\n    &:nth-child(odd)::before {\n      background-color: #82b632;\n    }\n\n    & > p {\n      text-transform: capitalize;\n    }\n\n    & > p:first-of-type {\n      color: #676c72;\n      font-weight: 600;\n      font-size: 16px;\n    }\n\n    & > p:last-of-type {\n      color: #a2a8b1;\n      font-size: 12px;\n    }\n\n    & > span {\n      bottom: 10px;\n      color: #009add;\n      font-size: 10px;\n      position: absolute;\n      right: 25px;\n    }\n  }\n`;\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// store\nimport {\n  getListCategoriesSelector,\n  getListWordsSelector,\n} from '../../store/words/selectors';\n\n// styles\nimport { ListWords as ListWordsStyled } from './ListWordsStyled';\n\ntype TProps = {\n  selectedCategory: number;\n  setSelectedCategory: (index: number) => void;\n};\n\nconst ListWords: FunctionComponent<TProps> = ({\n  selectedCategory,\n  setSelectedCategory,\n}) => {\n  const categories = useSelector(getListCategoriesSelector);\n  const listWords = useSelector(getListWordsSelector(selectedCategory));\n\n  return (\n    <ListWordsStyled>\n      {/* NAV CATEGORY */}\n      <nav>\n        {categories.map((name, index) => (\n          <p\n            className={selectedCategory === index ? 'selected' : ''}\n            onClick={() => setSelectedCategory(index)}\n            key={index}\n          >\n            {name}\n          </p>\n        ))}\n      </nav>\n\n      {/* WORDS */}\n      {listWords.map(({ english, polish }, index) => (\n        <div key={index} className=\"word-wrapper\">\n          <p>{english}</p>\n          <p>{polish}</p>\n          <span>{categories[selectedCategory]}</span>\n        </div>\n      ))}\n    </ListWordsStyled>\n  );\n};\n\nexport default ListWords;\n","export default __webpack_public_path__ + \"static/media/plus.045632c6.svg\";","export default __webpack_public_path__ + \"static/media/logo-neutral.44afc0dd.svg\";","export default __webpack_public_path__ + \"static/media/header-background.f1590ff3.svg\";","// @ts-nocheck\nimport styled from 'styled-components';\n\n// others\nimport HeaderBackground from '../../assets/images/header-background.svg';\n\nexport const PageHeader = styled.header`\n  background-image: url(${HeaderBackground});\n  height: 90px;\n  padding: 10px 15px 0 15px;\n  position: relative;\n\n  .wrapper-items {\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n\n    & > img:first-of-type {\n      height: 36px;\n      width: 32px;\n    }\n\n    & > h3 {\n      color: #fff;\n      font-weight: 600;\n      margin: 0;\n      text-align: center;\n    }\n\n    & > img:last-of-type {\n      height: 15px;\n      width: 15px;\n    }\n  }\n\n  .statistic-container {\n    align-items: center;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 5px 9px -3px #00000047;\n    display: flex;\n    height: 70px;\n    justify-content: space-between;\n    left: 10%;\n    padding: 10px;\n    position: absolute;\n    top: 65px;\n    width: 80%;\n  }\n\n  .statistic-wrapper {\n    text-align: center;\n    & > p {\n      color: #46494e;\n      font-weight: bold;\n    }\n\n    & > span {\n      color: #747575;\n      font-size: 12px;\n    }\n  }\n`;\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport PlusIcon from '../../assets/icons/plus.svg';\nimport LogoNeutral from '../../assets/images/logo-neutral.svg';\n\n// store\nimport {\n  getSumTotalWordsSelector,\n  getSumWordsFormCategorySelector,\n} from '../../store/words/selectors';\n\n// styles\nimport { PageHeader as PageHeaderStyled } from './PageHeaderStyled';\n\ntype TProps = {\n  selectedCategory: number;\n};\n\nconst PageHeader: FunctionComponent<TProps> = ({ selectedCategory }) => {\n  const totalAmountWords = useSelector(getSumTotalWordsSelector);\n  const amountWords = useSelector(\n    getSumWordsFormCategorySelector(selectedCategory)\n  );\n\n  return (\n    <PageHeaderStyled>\n      <div className=\"wrapper-items\">\n        {/* ICON */}\n        <img alt=\"logo-neutral\" src={LogoNeutral} />\n\n        {/* TITLE */}\n        <h3>English Words</h3>\n\n        {/* ICON */}\n        <img alt=\"plus-icon\" src={PlusIcon} />\n      </div>\n\n      {/* STATISTICS */}\n      <div className=\"statistic-container\">\n        <div className=\"statistic-wrapper\">\n          <p>{totalAmountWords}</p>\n          <span>Total Words</span>\n        </div>\n        <div className=\"statistic-wrapper\">\n          <p>{amountWords}</p>\n          <span>Words In This Section</span>\n        </div>\n      </div>\n    </PageHeaderStyled>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/logo.9f57ff92.svg\";","// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const PageLoader = styled.div`\n  background-color: #fff;\n  height: 100vh;\n  left: 0;\n  position: fixed;\n  pointer-events: none;\n  top: 0;\n  transition: 2s linear;\n  width: 100%;\n  z-index: 10;\n\n  ${({ isPending }) => !isPending && 'opacity: 0; visibility: hidden;'}\n\n  .loader {\n    animation: spinr 1.5s linear infinite;\n    border: 1px solid transparent;\n    border-radius: 50%;\n    border-top-color: #009add;\n    display: block;\n    height: 150px;\n    left: 50%;\n    margin: -75px 0 0 -75px;\n    position: relative;\n    top: 40%;\n    width: 150px;\n    -moz-animation: spinr 1.5s linear infinite;\n    -moz-border-radius: 50%;\n    -o-animation: spinr 1.5s linear infinite;\n    -webkit-animation: spinr 1.5s linear infinite;\n    -webkit-border-radius: 50%;\n\n    &::after {\n      animation: spinr 1s linear infinite;\n      border: 1px solid transparent;\n      border-radius: 50%;\n      border-top-color: #82b632;\n      bottom: 30px;\n      content: '';\n      left: 30px;\n      position: absolute;\n      right: 30px;\n      top: 30px;\n      -moz-animation: spinr 1s linear infinite;\n      -moz-border-radius: 50%;\n      -o-animation: spinr 1s linear infinite;\n      -webkit-animation: spinr 1s linear infinite;\n      -webkit-border-radius: 50%;\n    }\n\n    &::before {\n      animation: spinl 0.5s linear infinite;\n      border: 1px solid transparent;\n      border-radius: 50%;\n      border-top-color: #009add;\n      bottom: 15px;\n      content: '';\n      left: 15px;\n      position: absolute;\n      right: 15px;\n      top: 15px;\n      -moz-animation: spinl 0.5s linear infinite;\n      -moz-border-radius: 50%;\n      -o-animation: spinl 0.5s linear infinite;\n      -webkit-animation: spinl 0.5s linear infinite;\n      -webkit-border-radius: 50%;\n    }\n  }\n\n  .logo {\n    position: absolute;\n    left: 50%;\n    top: 40%;\n    transform: translate(-50%, -50%);\n  }\n\n  @-webkit-keyframes spinr {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n\n  @-moz-keyframes spinr {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n\n  @-o-keyframes spinr {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -o-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -o-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n\n  @keyframes spinr {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      -o-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      -o-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spinl {\n    0% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n    100% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n  }\n\n  @-moz-keyframes spinl {\n    0% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n    100% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n  }\n\n  @-o-keyframes spinl {\n    0% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -o-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n    100% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -o-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n  }\n\n  @keyframes spinl {\n    0% {\n      -webkit-transform: rotate(360deg);\n      -ms-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      -o-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n    100% {\n      -webkit-transform: rotate(0deg);\n      -ms-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      -o-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n  }\n`;\n","export const config = {\n  apiKey: 'AIzaSyA-VRLP3BsbsmqFPgwsqyV4dwmglIWSWKM',\n  authDomain: 'english-words-cb95b.firebaseapp.com',\n  databaseURL: 'https://english-words-cb95b-default-rtdb.firebaseio.com',\n  projectId: 'english-words-cb95b',\n  storageBucket: 'english-words-cb95b.appspot.com',\n  messagingSenderId: '180289885757',\n  appId: '1:180289885757:web:4e42c0ed923a6c4de93c54',\n};\n\nexport enum EDatabaseColumns {\n  data = 'data',\n}\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\nimport ReactDOM from 'react-dom';\n\n// others\nimport Logo from '../../assets/images/logo.svg';\n\n// styles\nimport { PageLoader as PageLoaderStyled } from './PageLoaderStyled';\n\ntype TProps = {\n  isPending: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ isPending }) =>\n  ReactDOM.createPortal(\n    <PageLoaderStyled isPending={isPending}>\n      {/* SPINNER */}\n      <div className=\"loader\" />\n\n      {/* LOGO */}\n      <img alt=\"logo\" className=\"logo\" src={Logo} />\n    </PageLoaderStyled>,\n    document.getElementById('pageLoader')\n  );\n\nexport default PageLoader;\n","import { connect, Selector } from 'react-redux';\nimport { compose } from 'recompose';\nimport { createStructuredSelector } from 'reselect';\n\n// others\nimport { TInnerProps } from './App';\n\nconst mapStateToProps: Selector<any, any> = createStructuredSelector({});\n\nexport const enhanceApp = compose<TInnerProps, null>(\n  connect(mapStateToProps, null)\n);\n","// @ts-nocheck\nimport React, { FunctionComponent, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport ListWords from '../ListWords/ListWords';\nimport PageHeader from '../PageHeader/PageHeader';\nimport PageLoader from '../PageLoader/PageLoader';\nimport { enhanceApp } from './enhanceApp';\n\n// store\nimport { isPendingSelector } from '../../store/words/selectors';\n\nexport type TInnerProps = {};\n\nconst App: FunctionComponent<TInnerProps> = () => {\n  const [selectedCategory, setSelectedCategory] = useState(0);\n  const isPending = useSelector(isPendingSelector);\n\n  return (\n    <>\n      <PageLoader isPending={isPending} />\n      {!isPending && (\n        <>\n          <PageHeader selectedCategory={selectedCategory} />\n          <ListWords\n            selectedCategory={selectedCategory}\n            setSelectedCategory={setSelectedCategory}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default enhanceApp(App);\n","import { connect } from 'react-redux';\nimport { compose } from 'recompose';\n\n// others\nimport { TWord } from '../../store/words/types';\nimport { TInnerProps } from './Firebase';\n\n// store\nimport { fetchWordsSuccessAction } from '../../store/words/actions';\n\nconst mapDispatchToProps = {\n  fetchWordsSuccess: (payload: Array<TWord>) =>\n    fetchWordsSuccessAction(payload),\n};\n\nexport const enhanceFirebase = compose<TInnerProps, null>(\n  connect(null, mapDispatchToProps)\n);\n","// @ts-nocheck\n// others\nimport { TFetchWords } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TAddNewWord, TFetchWordsSuccess } from './types';\n\nexport const fetchWordsSuccessAction = (\n  payload: Array<TFetchWords>\n): TFetchWordsSuccess => ({\n  type: WordsActionsType.fetchWordsSuccess,\n  payload,\n});\n\nexport const addNewWordAction = (\n  payload: Array<TAddNewWord>\n): TFetchWordsSuccess => ({\n  type: WordsActionsType.addNewWord,\n  payload,\n});\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { EDatabaseColumns as DataBaseColumns } from '../constants';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DataBaseColumns = DataBaseColumns.data\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: void) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport React, { FunctionComponent, useEffect } from 'react';\nimport firebase from 'firebase';\n\n// components\nimport { enhanceFirebase } from './enhanceFirebase';\n\n// others\nimport { config } from './constants';\nimport { TWord } from '../../store/words/types';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nexport type TInnerProps = {\n  fetchWordsSuccess: (payload: Array<TGroupedEndpoint>) => void;\n};\n\nconst Firebase: FunctionComponent<TInnerProps> = ({ fetchWordsSuccess }) => {\n  const actions = (payload: Array<TWord>): void => {\n    fetchWordsSuccess(payload);\n  };\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    databaseHandler(firebase, actions);\n  }, []);\n\n  return null;\n};\n\nexport default enhanceFirebase(Firebase);\n","// @ts-nocheck\n// others\nimport { TFetchWordsSuccess } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TWordsState as TWordsState } from './types';\n\nconst initialState: TWordsState = {\n  data: [],\n  isPending: true,\n};\n\nconst fetchWordsSuccess = (\n  state: TWordsState,\n  action: TFetchWordsSuccess\n): TWordsState => ({\n  ...state,\n  data: action.payload,\n  isPending: false,\n});\n\nconst words = (\n  state: TWordsState = initialState,\n  action: TAnyAction\n): TWordsState => {\n  switch (action.type) {\n    case WordsActionsType.fetchWordsSuccess:\n      return fetchWordsSuccess(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default words;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport words from './words/reducer';\n\nconst reducers = { words };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\nimport { put, PutEffect, select } from 'redux-saga/effects';\n\n// services\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\nexport function* addNewWord(data): Generator<PutEffect<any>> {\n  try {\n    yield getRefDatabase(['words']).set(data.payload);\n  } catch (error) {\n    //yield put(addNotification(error, 'Add new endpoint', EFeedbackTypes.ERROR));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { addNewWord } from './saga';\nimport { WordsActionsType } from './actionsType';\nimport { TWord } from './types';\n\nexport function* watchGroupedEndpoints(): Generator<\n  AllEffect<ForkEffect<TWord>>\n> {\n  yield all([takeEvery(WordsActionsType.addNewWord, addNewWord)]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchGroupedEndpoints } from './words/watch';\n\nconst watches = [watchGroupedEndpoints];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","export enum EFontNames {\n  NUNITO = 'Nunito',\n  RUBIK = 'Rubik',\n}\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import { createGlobalStyle } from 'styled-components';\n\n// others\nimport { EFontNames } from './constants';\n\nexport default createGlobalStyle`\n  * {\n   margin: 0;\n   padding: 0;\n  }\n\n  html {\n    line-height: 1.15;\n    -webkit-text-size-adjust: 100%; \n  }\n\n  body {\n  background-color: #F9F9F9;\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html, body {\n    min-height: 100vh;\n  }\n\n  #root {\n    max-height: calc(100vh - 50px);\n    min-height: calc(100vh - 50px);\n    overflow-y: auto;\n  }\n\n  input, \n  header,\n  textarea, \n  a, \n  p, \n  span, \n  kbd {\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6 {\n    font-family: ${EFontNames.NUNITO}, sans-serif;\n  }\n`;\n","// @ts-nocheck\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'antd/dist/antd.css';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport GlobalStyle from './styles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <GlobalStyle />\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
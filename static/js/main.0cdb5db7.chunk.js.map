{"version":3,"sources":["components/ListWords/ListWordsStyled.tsx","components/ListWords/ListWords.tsx","assets/icons/plus.svg","assets/images/header-background.svg","components/PageHeader/PageHeaderStyled.tsx","store/words/actionsType.ts","components/PageHeader/PageHeader.tsx","components/App/enhanceApp.tsx","components/App/App.tsx","store/words/actions.ts","components/Firebase/constants.ts","components/Firebase/enhanceFirebase.tsx","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/words/reducer.ts","store/reducers.ts","components/Firebase/services/getRefDatabase.ts","store/words/saga.ts","store/words/watch.ts","store/sagas.ts","constants.ts","store/configureStore.ts","styles.tsx","index.tsx"],"names":["ListWords","styled","div","words","useSelector","state","data","className","reverse","map","index","english","polish","WordsActionsType","PageHeader","header","HeaderBackground","alt","src","PlusIcon","mapStateToProps","createStructuredSelector","enhanceApp","compose","connect","EDatabaseColumns","mapDispatchToProps","fetchWordsSuccess","payload","type","fetchWordsSuccessAction","enhanceFirebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","i","length","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","ref","DataBaseColumns","database","on","useEffect","initializeApp","initialState","action","reducers","createRootReducer","combineReducers","getRefDatabase","path","refDataBase","child","addNewWord","set","watchGroupedEndpoints","all","takeEvery","EFontNames","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","createGlobalStyle","RUBIK","NUNITO","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cdb5db7.chunk.js","sourcesContent":["// @ts-nocheck\nimport styled from 'styled-components';\n\nexport const ListWords = styled.div`\n  margin-top: 50px;\n  max-height: calc(100vh - 100px);\n  overflow-y: auto;\n\n  .table {\n    position: relative;\n    width: 100%;\n    border-radius: 3px;\n    -webkit-box-shadow: 0 1px 6px 0 rgba(0, 0, 0, 0.12),\n      0 1px 6px 0 rgba(0, 0, 0, 0.12);\n    -moz-box-shadow: 0 1px 6px 0 rgba(0, 0, 0, 0.12),\n      0 1px 6px 0 rgba(0, 0, 0, 0.12);\n    box-shadow: 0 1px 6px 0 rgba(0, 0, 0, 0.12), 0 1px 6px 0 rgba(0, 0, 0, 0.12);\n  }\n\n  .table > tbody > tr > td,\n  .table > tbody > tr > th,\n  .table > thead > tr > td,\n  .table > thead > tr > th {\n    padding: 15px;\n    border-top-color: #eeeeee;\n  }\n\n  tr:nth-child(even) {\n    background-color: #f9f9f9;\n  }\n\n  tr,\n  th {\n    text-align: center;\n  }\n\n  td {\n    width: 50%;\n  }\n`;\n","// @ts-nocheck\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\n// styles\nimport { ListWords as ListWordsStyled } from './ListWordsStyled';\n\nconst ListWords = () => {\n  const words = useSelector((state) => state.words.data);\n\n  return (\n    <ListWordsStyled>\n      {/* TABLE */}\n      <div className=\"container demo\">\n        <table className=\"table table-no-more\">\n          <tbody>\n            {[...words].reverse().map(({ english, polish }, index) => (\n              <tr key={index}>\n                <td>{english}</td>\n                <td>{polish}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </ListWordsStyled>\n  );\n};\n\nexport default ListWords;\n","export default __webpack_public_path__ + \"static/media/plus.045632c6.svg\";","export default __webpack_public_path__ + \"static/media/header-background.f1590ff3.svg\";","// @ts-nocheck\nimport styled from 'styled-components';\n\n// others\nimport HeaderBackground from '../../assets/images/header-background.svg';\n\nexport const PageHeader = styled.header`\n  background-image: url(${HeaderBackground});\n  height: 90px;\n  position: relative;\n\n  & > h3 {\n    color: #fff;\n    font-weight: 600;\n    padding: 25px 15px;\n    text-align: center;\n  }\n\n  & > img {\n    position: absolute;\n    right: 15px;\n    top: 27px;\n  }\n\n  .statistic-container {\n    align-items: center;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 5px 9px -3px #00000047;\n    display: flex;\n    height: 70px;\n    justify-content: space-between;\n    left: 10%;\n    padding: 10px;\n    position: absolute;\n    top: 65px;\n    width: 80%;\n  }\n\n  .statistic-wrapper {\n    text-align: center;\n    & > p {\n      color: #46494e;\n      font-weight: bold;\n    }\n\n    & > span {\n      color: #747575;\n      font-size: 12px;\n    }\n  }\n`;\n","export const REDUCER_KEY = 'groupedEndpoints';\n\nexport enum WordsActionsType {\n  fetchWordsSuccess = 'fetchWordsSuccess',\n  fetchWordsError = 'fetchWordsErorr',\n  addNewWord = 'addNewWord',\n  addNewWordSuccess = 'addNewWordSuccess',\n  addNewWordError = 'addNewWordSuccess',\n  editWord = 'editWord',\n  editWordSuccess = 'editWordSuccess',\n  editWordError = 'editWordError',\n  deleteWord = 'deleteWord',\n  deleteWordSuccess = 'deleteWordSuccess',\n  deleteWordError = 'deleteWordError',\n}\n","// @ts-nocheck\nimport React from 'react';\n\n// others\nimport PlusIcon from '../../assets/icons/plus.svg';\n\n// styles\nimport { PageHeader as PageHeaderStyled } from './PageHeaderStyled';\n\nconst PageHeader = () => {\n  return (\n    <PageHeaderStyled>\n      {/* TITLE */}\n      <h3>English Words</h3>\n\n      {/* ICON */}\n      <img alt=\"plus-icon\" src={PlusIcon} />\n\n      {/* STATISTICS */}\n      <div className=\"statistic-container\">\n        <div className=\"statistic-wrapper\">\n          <p>128</p>\n          <span>Total Words</span>\n        </div>\n        <div className=\"statistic-wrapper\">\n          <p>128</p>\n          <span>Words</span>\n        </div>\n      </div>\n    </PageHeaderStyled>\n  );\n};\n\nexport default PageHeader;\n","import { connect, Selector } from 'react-redux';\nimport { compose } from 'recompose';\nimport { createStructuredSelector } from 'reselect';\n\n// others\nimport { TInnerProps } from './App';\n\nconst mapStateToProps: Selector<any, any> = createStructuredSelector({});\n\nexport const enhanceApp = compose<TInnerProps, null>(\n  connect(mapStateToProps, null)\n);\n","// @ts-nocheck\nimport React, { FunctionComponent } from 'react';\n\n// components\nimport ListWords from '../ListWords/ListWords';\nimport PageHeader from '../PageHeader/PageHeader';\nimport { enhanceApp } from './enhanceApp';\n\nexport type TInnerProps = {};\n\nconst App: FunctionComponent<TInnerProps> = () => {\n  return (\n    <>\n      <PageHeader />\n      <ListWords />\n    </>\n  );\n};\n\nexport default enhanceApp(App);\n","// @ts-nocheck\n// others\nimport { TFetchWords } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TAddNewWord, TFetchWordsSuccess } from './types';\n\nexport const fetchWordsSuccessAction = (\n  payload: Array<TFetchWords>\n): TFetchWordsSuccess => ({\n  type: WordsActionsType.fetchWordsSuccess,\n  payload,\n});\n\nexport const addNewWordAction = (\n  payload: Array<TAddNewWord>\n): TFetchWordsSuccess => ({\n  type: WordsActionsType.addNewWord,\n  payload,\n});\n","export const config = {\n  apiKey: 'AIzaSyA-VRLP3BsbsmqFPgwsqyV4dwmglIWSWKM',\n  authDomain: 'english-words-cb95b.firebaseapp.com',\n  databaseURL: 'https://english-words-cb95b-default-rtdb.firebaseio.com',\n  projectId: 'english-words-cb95b',\n  storageBucket: 'english-words-cb95b.appspot.com',\n  messagingSenderId: '180289885757',\n  appId: '1:180289885757:web:4e42c0ed923a6c4de93c54',\n};\n\nexport enum EDatabaseColumns {\n  words = 'words',\n}\n","import { connect } from 'react-redux';\nimport { compose } from 'recompose';\n\n// others\nimport { TWord } from '../../store/words/types';\nimport { TInnerProps } from './Firebase';\n\n// store\nimport { fetchWordsSuccessAction } from '../../store/words/actions';\n\nconst mapDispatchToProps = {\n  fetchWordsSuccess: (payload: Array<TWord>) =>\n    fetchWordsSuccessAction(payload),\n};\n\nexport const enhanceFirebase = compose<TInnerProps, null>(\n  connect(null, mapDispatchToProps)\n);\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { EDatabaseColumns as DataBaseColumns } from '../constants';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DataBaseColumns = DataBaseColumns.words\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: void) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport React, { FunctionComponent, useEffect } from 'react';\nimport firebase from 'firebase';\n\n// components\nimport { enhanceFirebase } from './enhanceFirebase';\n\n// others\nimport { config } from './constants';\nimport { TWord } from '../../store/words/types';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nexport type TInnerProps = {\n  fetchWordsSuccess: (payload: Array<TGroupedEndpoint>) => void;\n};\n\nconst Firebase: FunctionComponent<TInnerProps> = ({ fetchWordsSuccess }) => {\n  const actions = (payload: Array<TWord>): void => {\n    fetchWordsSuccess(payload);\n  };\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    databaseHandler(firebase, actions);\n  }, []);\n\n  return null;\n};\n\nexport default enhanceFirebase(Firebase);\n","// @ts-nocheck\n// others\nimport { TFetchWordsSuccess } from './types';\n\n// store\nimport { WordsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TWordsState as TWordsState } from './types';\n\nconst initialState: TWordsState = {\n  data: [],\n};\n\nconst fetchWordsSuccess = (\n  state: TWordsState,\n  action: TFetchWordsSuccess\n): TWordsState => ({\n  ...state,\n  data: action.payload,\n});\n\nconst words = (\n  state: TWordsState = initialState,\n  action: TAnyAction\n): TWordsState => {\n  switch (action.type) {\n    case WordsActionsType.fetchWordsSuccess:\n      return fetchWordsSuccess(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default words;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport words from './words/reducer';\n\nconst reducers = { words };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\nimport { put, PutEffect, select } from 'redux-saga/effects';\n\n// services\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { fetchWordsSuccessAction } from './actions';\n\nexport function* addNewWord(data): Generator<PutEffect<any>> {\n  try {\n    yield getRefDatabase(['words']).set(data.payload);\n  } catch (error) {\n    //yield put(addNotification(error, 'Add new endpoint', EFeedbackTypes.ERROR));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { addNewWord } from './saga';\nimport { WordsActionsType } from './actionsType';\nimport { TWord } from './types';\n\nexport function* watchGroupedEndpoints(): Generator<\n  AllEffect<ForkEffect<TWord>>\n> {\n  yield all([takeEvery(WordsActionsType.addNewWord, addNewWord)]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchGroupedEndpoints } from './words/watch';\n\nconst watches = [watchGroupedEndpoints];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","export enum EFontNames {\n  NUNITO = 'Nunito',\n  RUBIK = 'Rubik',\n}\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import { createGlobalStyle } from 'styled-components';\n\n// others\nimport { EFontNames } from './constants';\n\nexport default createGlobalStyle`\n  * {\n   margin:0;\n   padding:0;\n  }\n\n  html {\n    line-height: 1.15;\n    -webkit-text-size-adjust: 100%; \n  }\n\n  body {\n  background-color: #F9F9F9;\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html, body, #root {\n    min-height: 100vh;\n  }\n\n  input, \n  header,\n  textarea, \n  a, \n  p, \n  span, \n  kbd {\n    font-family: ${EFontNames.RUBIK}, sans-serif;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6 {\n    font-family: ${EFontNames.NUNITO}, sans-serif;\n  }\n`;\n","// @ts-nocheck\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'antd/dist/antd.css';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport GlobalStyle from './styles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <GlobalStyle />\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}